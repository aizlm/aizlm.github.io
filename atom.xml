<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aizlm‘s_Blog</title>
  
  <subtitle>瞎学日记</subtitle>
  <link href="https://aizlm.github.io/atom.xml" rel="self"/>
  
  <link href="https://aizlm.github.io/"/>
  <updated>2022-06-15T03:46:21.569Z</updated>
  <id>https://aizlm.github.io/</id>
  
  <author>
    <name>Aizlm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT&amp;OAuth2</title>
    <link href="https://aizlm.github.io/2022/06/14/JWT-OAuth2/"/>
    <id>https://aizlm.github.io/2022/06/14/JWT-OAuth2/</id>
    <published>2022-06-14T01:02:28.000Z</published>
    <updated>2022-06-15T03:46:21.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-SpringSecurity-JWT-amp-OAuth2"><a href="#SpringCloud-SpringSecurity-JWT-amp-OAuth2" class="headerlink" title="SpringCloud | SpringSecurity JWT&amp;OAuth2"></a>SpringCloud | SpringSecurity JWT&amp;OAuth2</h1><h2 id="有状态与无状态"><a href="#有状态与无状态" class="headerlink" title="有状态与无状态"></a>有状态与无状态</h2><p>详解【1】</p><ul><li>Web服务的状态指的是请求的状态，而不是资源的状态<ul><li>基于状态的服务，简单的说就是当前的用户请求状态与某一台服务器进行绑定，无法进行负载均衡等调度；</li><li>基于无状态的服务，Server不保存任何请求状态信息，Client的每一个请求都具有User credentials等所需要的全部信息，所以能被任意可用的Server应答。</li></ul></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】理解有状态与无状态：<a href="https://blog.csdn.net/Jmilk/article/details/50461577">https://blog.csdn.net/Jmilk/article/details/50461577</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud-SpringSecurity-JWT-amp-OAuth2&quot;&gt;&lt;a href=&quot;#SpringCloud-SpringSecurity-JWT-amp-OAuth2&quot; class=&quot;headerlink&quot; title=&quot;SpringClou</summary>
      
    
    
    
    
    <category term="web学习捏" scheme="https://aizlm.github.io/tags/web%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>Springboot-admin项目实践</title>
    <link href="https://aizlm.github.io/2022/06/13/Springboot-admin%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    <id>https://aizlm.github.io/2022/06/13/Springboot-admin%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-06-13T08:17:01.000Z</published>
    <updated>2022-06-13T12:13:17.722Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d3e12cfe000313100ca24c5cd80973255e6cba1f5622561fac1a3c02fa085af7">03ac86e023573d69e9df3d3199e050f4660eea74a6aad07ce108cd8667503d0521495c093ea33b87166df8362861a25b8673dc758bfb005fc4fa016e12d5f4887bca72f7b4fa3b26ec1f4fb8bd1a7aed2891307b53415c14244d10f27b7836ce9eabe072ca5475615e6bdce33256d1018ef12731d719aa0cc58bc8cd7756f54d406664a74815dd586a256f497a686f184221d26f9791bc803fcd8917769f1dc3b7cfbd2cd3b655abd50286d5e87b8edac07cdf78e920770a3204297cb53212e8dc39eaa2104011e0028d4d7548c16ae8dd1614db2362ac8b028e36c9703e901f73fb2a10b93bdba30aee2aa989420f84a48e9364900a8a2031ed5f9e22c5124ae39a2436d09c5bae126c758c24b3c7c93e73f981bdd383378f94db9d7df5c095380d5cfc37ea7a443593b21198ea6b58b259fb9a164d104264cff729ae7e83694f10bd4d622129448ca1c5dda330895fa6a90eb2717acd4bb5db35dcf7138ee9eab7298495cc2ed9b4036c1581ea379140f0197140ba8de3bb898ec453a8c49e90e4a6b78e1f6649610333a75e0df28a503c7c0614fc50da4cc95cfb03afd26dd0bb8e45977034dede08545b89be2392288f65784c56756ac622b960a1e8006e553289b2971f0cd0ed1553f97830d0c31fc3c518e0304950a3d9f39d9a071ebcb6119d42fc16f43d56745e09012d130b6d0645d38266f795e339c0d5f856e3eba825467502c3278a66c6ce66afd3e7f20f0efc28fca1a7a2511f51bc2896359097fc968f453123905b93f1e469ac0d3a9f42088048a99f80c2ed00339fc61affa97a283161d3f6635378d1a24df1907c4f0713c8f7e3a8bc6a630bec5b6b2397aebbc8f02925f9edad5528e1a03ec8db6b6f82cd88676b40f27f1ea5ef22082e51a3d1564def582592f407fcd81e83b9b2f4bf22aa1e26869a6cbaaf10d13272aebc3fc42d314d3d481e151fe08d396eb76250b2ea57b07f7d7622dc6b23db1b9fbb351c57ed33a4683700a6dd617da45273f6ba115ad20237bd446cdb4d4a407855b4c1ae9c3380bb5944d057f538ab5d748bf793c61a607639204f72593509b0ee86a593c19bfe6f681c22aee38817fce9efce814b347363a291e47022dc90eddc00bea6fb4bf64f2c26c2f701eee7228e15a9eb1e2bde6aca20364f9115dc43ca7579cdba71850dce8e0f88ea919351c038a9ba338b963bb5feefbb9ec3eb250c187a32e2c97d5d46c28bb535d652f8810cdbdfa8c609b594b2d325b9375d6b7b7afc8fbddcbb424d452a2716635dddcbab96195bdd575e87de8edf303251ec0f8fb3d5e315b567984bf266c46b920407e4e21fb8f1efdb9d77fe53839edd441af2d52f1a8c6eebb654c3e433f10da92111feb3b5706f3b522682eec1358782df2170f27dc05f80e7e5a42826df80e1fc03241b3f28fe93fa17124a0337c0c0e9be04cb2f38a3f36c642da009824882ce2c219190735bc07ca3d9a204d35499e129d87e31da8ff9d0c65bd29295baf5134b08662b115347155edb495de1d957b8f02f508c4bb454a04451a4f35d9dc04b3db7db3e3b1ac8e83f926293d4b7060af16443d5c96df1b02b103a2736991e25e2f34a58353bafb4a7c74dde7ed2a34bd83705ac7552d87b6197ffbe0f4f6ae9c898ef92c5de0df196ccb813a92018e005f341d9b55caee5549558635e8f108500449bbfee3df46a37ae495f920826730d9c6217de703e3162f20e5b009755d2fa61115f5b4d1ed93d6c67acf54d82d150863a1f94de5c66366e5597e41cfe38a867ec54023136b071690c7f643b086ccc057027a52ffe32ed64ff6afc20f4de15f6677115131e942e759c5cf3f3bc8897d067505dfc6c1e18c8de33376910d0b01a38f74dde37e831741d6f07d4f9a5a465b29b99df1bddf05c65b740ca1548b16b27fbf5324ae0602f2c604ef36e7d02d1733b5e2629355eb8a1efd4818803100dd75852622a20d96230fa071b12f8e64f540804c63750c5a81e30c392b53153d8f71494625fcbf0ad7f6a36f4116c6807a840d9ca72e94f80dac941e35ceee69f8e17c49cf4cdced936bc7a4d931aa49ebba46ea867467352ad36e104771e5ccfecead8096463734a0fc22b055c943dd6a67e7e9b23b465ffc0d9019fb86d577a1a192c3691200412a7f224a941a53c2085e0119f82a53aa6850ef059b9a8dc19744d606f60375f44359dc0cba8df46afeeeb44d31b8bd54de0cdd6a0f0cbbb949705175d0948e1ce1fe051653a7a880246f0dfbca49afc5636efe06808e5ad71e826d9fb0e54690da9e18601d940bb73b628f851ee7b4f3eea0a2c0b673a7b6bf2011791d947360956f95f640ef96e5744c58f939c35b08175a38518232a9a29cd97f821f71d1e18f72ec47d624e8f336686f222a39981ccda8d0873d79372fee9bb00febbdc1edd32ed6f9acdfaeab3d7e6584cddd7f2b85be701048875cc4d89e68f6a45f85bfb4410a9fa12ab7c7485cbd89ecded9270f267313d4a38ba39e825cd9c50d4bb87de8e7f5c984352f8222bf49813d052282d649a46d98bce4c8989b4a342fd46a99d468248ec24429f7804ca7ab8699c82132ef0d0cdc4f56c6f11fd2f2c9f29b6172ceb42b21880bbe3d122606fe3abe46cdd79c535528cf8dae4ce075057a9ea852b07e81193ac19065350f309d6a805644bacb06a965a7427c4c5f7f60bfcb9631435a6825989d5e9079fec5d818b1183f720ae2f63472ba897b97c1a417990145cd3965cebdc437bfa7163f2e81385ae15ee5342dc252d16465c6dd959d579af19144fe2b459a34f2a4d7a820747d1d5b65d9399faad30be7bd095a85bbd8ae10bf4ceb69719dcea9581e2be7fc4bc1367998858fb579e7e36094a7b7b8b620ddc0ef27f7581773198426ec214176ef75b65624633fb071804104b3321c7dece2162f32c48782e34a21a39918482533aad53cedda6b4a702ee10e8d90db5d6ce7c42944006d5f714a85719fb60a1053f456c481fab35ef2a9b72b1026646b95134affe63ed7e506aca09c1cea57b9dbe8ec136b8b45a438288c6a16919da57ca84b8639c495682248a42284b2cb5b40fc24ddecfa2c168a85067e75563bce9b7858aa838d3deb6ca47bb5f27a333b2778e8f2c2f912607f1768703cb31025e6a5ea7ebc961d75ecccfd917d660811a394d7aad29c325bf0e6f6261eb11a6337d8db50628d80124960e38fd171712eb43e62beb075b75417856e4cf9319be1d244d3195d16eef4625b5b54318746e58291ea238f234375c1a92da06fd57db2de5614cbb6b593780e9a7d4948d522e17556bf2de4e79a676038e2c92d5abcc57cc2d4364aadc32ff46f4a7231684bfe9d4324b4775790117f80a61452d61a0007eb1d0e333e685da07c8b7270bb66b98449e5b6541b63cdc49aed8bd5ae6e3e8555ab99bbbd23432a7684b6410295d9aceb38b0a1ac6be650b3987ce7a734b3c201a5be5fea4710ad3187ff48d4b83cf703ae09b8f64820f3cdc88b6f2a3cc983e826f7c64ef66b3385f51b4e492de3a96ab71670e50e6faf00aa3282aa2b8405d189964676ad88d519526644e30faf73657f01ccd990901a422bc0b18202e4609a173968cccb43ef8283e850fc91293ca65f08288e9bae1f4752c3c2236159e4a80b76a02a9504c8a683e76ad3075ea7755f3a13447557d4b480c9665f5925ba8452c9c5e1ac9c99da2ad5fa387998b164eb644425cce782ca334bf1c701eb80c88a04bf6aa18c6b9aa2f793ef3c60ae582c3b4938ae0e4c20236928f7455949ef65db3b67e3f316d1b60cb9ad1075a56f8f3c8fbc9ce9dc390e261fb35237074e4b3dfcaef83b84fb96951971907aedc139ca3176b7a1d13dd0673ddf1954a12985c5538610452ce9a1d03ed6f0590f90bc9b0fa3f60780f0c3b07550e747564025f8e4cc28e6f1edc73ea3615cc556fd366790e9583b50d476742d7799d992e00c7462a53cf6088f4e39a615d2b2a4102b966ce3dbdafaf029c30ed31fc0387bb01f4ebcc29628a932986583bc3aa2a323e1f2d50de68d02f71114deadff33a66b4dd069d03c5645e54de7b89c33fad61f0caaae5af3507772fc0e74742cfae7644c67ad776850f8d1b93171ddd9236ad6e11a2bcdc0f9be5ab96fc9daf3f3d1d2438</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="项目实践" scheme="https://aizlm.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Springboot-参数解析原理</title>
    <link href="https://aizlm.github.io/2022/06/09/Springboot%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/"/>
    <id>https://aizlm.github.io/2022/06/09/Springboot%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86/</id>
    <published>2022-06-09T01:07:52.000Z</published>
    <updated>2022-06-09T06:27:51.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot-参数解析原理"><a href="#Springboot-参数解析原理" class="headerlink" title="Springboot-参数解析原理"></a>Springboot-参数解析原理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.web.servlet.DispatcherServlet.doDispatch()</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">...</span><br><span class="line">    mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//获取处理器适配器，通过处理器适配器调用处理请求的方法</span></span><br><span class="line">    <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line">    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.handleInternal(request, response, (HandlerMethod)handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal()</span></span><br><span class="line">mav = <span class="built_in">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">invokeHandlerMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ServletWebRequest</span> <span class="variable">webRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response);</span><br><span class="line">...</span><br><span class="line">    <span class="comment">//调用和处理请求</span></span><br><span class="line">    invocableMethod.invokeAndHandle(webRequest, mavContainer, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">...</span><br><span class="line">    var15 = <span class="built_in">this</span>.getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//org/springframework/web/method/support/InvocableHandlerMethod.invokeForRequest() -&gt; getMethodArgumentValues()</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//调用请求的参数</span></span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"></span><br><span class="line">    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        <span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">        args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">        <span class="keyword">if</span> (args[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用参数解析器解析参数</span></span><br><span class="line">            args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.resolveArgument()</span></span><br><span class="line"><span class="type">HandlerMethodArgumentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getArgumentResolver(parameter);</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title function_">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> &#123; </span><br><span class="line">    <span class="comment">//查看缓存中是否有解析过改参数的解析器</span></span><br><span class="line">    <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历所有参数解析器来匹配该参数</span></span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="built_in">this</span>.argumentResolvers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">                result = resolver;</span><br><span class="line">                <span class="built_in">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot-参数解析原理&quot;&gt;&lt;a href=&quot;#Springboot-参数解析原理&quot; class=&quot;headerlink&quot; title=&quot;Springboot-参数解析原理&quot;&gt;&lt;/a&gt;Springboot-参数解析原理&lt;/h1&gt;&lt;figure class</summary>
      
    
    
    
    
    <category term="源码分析捏" scheme="https://aizlm.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>bitcoin</title>
    <link href="https://aizlm.github.io/2022/06/07/bitcoin/"/>
    <id>https://aizlm.github.io/2022/06/07/bitcoin/</id>
    <published>2022-06-07T02:01:53.000Z</published>
    <updated>2022-06-09T07:57:37.063Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="feb6c7ca0ff52e4ca7748965d696617f4c8c2f610d4a25e9719f14b94d5812aa">5c75810ab82df1e4b2b28acfab07bc4ef61f8bc8dc371ccb2af4c26f3a6a15256e8fd5df1314524265250f7da8962d26cc29ac047f567ba778a902b0fe0d124117bf51ddf88953828f6a13986c95fa798d035dbfa0ff1069031dd1d2e3caec8b414b1872585cb9b8e265c1fa71199644baa129a8d909667d2b2f4a4f1cdf94e4366a65e8537591320198d369bddcdfd1ff3b1a1ec98a609b9c2463d9e5c45bde86459c41119d04766705a7aaa2adfea8e7f10ab33c2b0a01d9283226f2dc8ae89f7ff160fa85e3d676e8f834624dd4556eb884a19607a2c5b076097b2f70793331dd3f3090178488f7ef2bf4bce28199878e5485cb81bccb3c6e50f7ef360e77c34c5b226e7f26c5aae84a5b566bd9fb026ca7ed877fafc185eca7facaa51515c8f803ffc51f317fdf09e91641f2a6b03e87ce17fdd209c38ba3c0cb55bf4c01d9c42b4130f28eacb0781e09f7e6d77c6c9316f67631adcaa07036f5cac6b325bd17a5b84e6ad40657e8a1e7d3aa0934d1ee1c9f21fa197f180a3119f13348d5333ad70557bbb8bb2938563ac6030089449a3696a779474784650c4e762e7b731d9ed0738545b3f8842442c47ebe110ad9c3e24daf6316ef914ce47ec81e3a67db88225aa6ac99566c0f881488af27e96abe20eb0d8231ae4f3c9957354528322b1724510806a558e6b5909280498fc9bb3342196feedc2c9b0c120a1718db51da612f10a278b2cb760bbdd7c056d016969e94a5ea0a4a9252034cf7d643185495ddd627cb51db48aaf04516683b288ccfded8be2b866ae1c4acf295709483cb2d11e47b47b5887ad9e6932ac5935204e8a941bb70e3c68407b652bc8d5d3e0abbed7cb1037a911960947e987d0271eae2b475661384373304799f4f174111c0e62391a5e25165a325c7cbeebc9bd71e2e5c0a388110e47ff1bb25b6e42927f3f34c5df56d0130cdc53ef33074fc048df3c0e0165dcd478772c0207912536f88599065a45a1e63e68e94da64bd438fa82fead2e61270d77631a8b5451611544133e52e96aa6441c2301c26b68c302585c5d4666d8d301da807fe60889aa32529835b733940dca092397b213afb7aeae9985b54f853939493d3debcdef6cbb633eabae0c6f6636ffc2b6daf0974a60fbb2c43fc0b4dba87ab555261c73aa6de500cfde4f020db6d5a4caf56d23cf0cf82b36dc71bbd9c1834b711c9e9f81a2f0800c1df58568cca6b58d5a606a3eda9b5c0c42bf2d32f333c6db6ea6e55c5b2a63722470123aa37b1ae4efbb93e0d2bcb52277320cb23e9bc8e3d9758e598ef2faf196326176e434e9e548ccd9b621d5c671533647d0a9b87e0ff491ad869bb894085a6f259201e845d15dfc2d967d1bf5a6e7911268d7a8e8895e725d578819ce54bd4cebb20e7a3acedd8e669e32cec458faa601b9f2b16230635c9af526c8b69a582a48f5cbf172d21ffeb0b5ecae974d9c3321e3545ec487e96ba662f5ab45064a39dc91e87f09084779104f8961722f3f67eca5eae1b4279ffa1b25b221ab77560114dc8ac329f96072cd8268f7f4ca624a2c9d62bdb1579179e25c4099ed6f2399e296e89a4ade131f0ad264f79c8939ef60cc55c0c08e8619488d558ca2fe0107150ef945cd519c4cd8e8444952693b37e494530d185e1f4e78c0a87f756d6ffdf484172302717151e6a7a280b05998bde257a37389cd6cd302b02cd021fb7f80a03d4dfe56baee8cc6b27dee231ab47a96fa1b6c117ca604d681d95c09bd382856c447e84bcc0137d18b7c91244ea1b7d1b5ab5beb2baf6835d99698ed0e39ff71ed4e8fffeb2840f73df2367e1efcc7b9ce4da81371130ffb509e888efb5c01bb0a9627a8bff1ba3bcc420e0e5be1462de4a0bde7b3e4ef3952ab7dd25b8316d3d3a07c238e11970f5338fa7babca2a119a1ada5166f3ea85965aca79da88d24e9f45496bab99de6927a44caef7a7847f9a6ae948b69d532a90ee92837f5729ed97ce8d1abdeb3debe0ee4687af6cc172f5ad7c7c68c2ebcac0702affad7135f518d48a632e733ed3670cb4e4a50cf03df877ab35b039fb53d569724de1caae28957aa3d11e8af476f28aaad9e0bc9a4fc43612ec064b04789c40009362cf4331b7160a86cb4b164011f1d767ae48fee5cb726392183d5e3477d605e071f964fe1e1f5b614cf11e22de7b4680691ac7be6213d0b9ef8b09b095e82b6aa10cc5e177a541f10847b5752119dfff7940b02e005a483cf1b74e82a964a4569022dd21ba4f4bef9464c6ba986123827f295fa0ff28fba7cbea9deef764894456f9a6e7a68a318db92c18d65bbe46ead2e042455a841b9a0b28f0d1a1bb05038ff62610240460ad2a400aea7fbfc3a2832312ae740b312bf01e2683355ff431c57a61a2fc437c7b3afb9e3892d92c5a9c511f38ed2f7ab952577de8b1a66e4411910e0ac1c5201d8ef4ded3995a3fa8c527664592d2dd7663d2a13b538b2fb5320c29f664210e8ab192ed5d2ecfeadf0b8c11e8407c3bb06a77e416bd05410049a614e431078219d38d9694aa8c56c36144641e0e09cb3d548e53cc518f4afc979242205072cc4496efdf090fe8f7cf4b4f54e3c624f1d7012d82e4f7f8d24689499a7d1f82819b17e0517bd2c92f2e0888656229ec64103cb3105f144fd9aa36c2085865c27390ff5bb8daa8e012953058ee31c99a1b9d8e7bfa5393a2f2abe8bed42e5ef439bcc5096434f79a6353c0aa9aa264d9ed323967ea9bed24cbb32958cfc80b448b1735e2763d44edecfc44d000085ff6d05b929ba5021fc68e0ec235ec5b17f69da6874feb19ee5bf39991d0cc303463ccacafe4f37d4e321298ce08e9e441bc5f50a6c9444b198113ca327b478419d33d7bd8c239047cc4271254540fa0e78f047f81f8f53977933b9f1383d2e4f37d90336844fcb0f5343392ba5cc6909a68807240c12681930dc6e84f7e830b18ef8f52d5ec3e97dca8e985731a778219831561ea4b61740055386b3c3941d1a8000782809af4129b21304e704ab363e8823449e9352754330091ec7c7d8c698feba9bce5312bec505a806204742f4350980acaf0ec8c7dd4968827912fc78b2a9aac78f946e9fc4f23884713499ee566336ab4a492f66c548f8d3b059b4d1a04b65dbfc6271fc2ffe54caf851f1dcc70b2c21def2a887cf058fbb8489bf9947b6933b45b28901d838092a68b0d0684c15f3c23d0c6739968bd6c818a2ecfc9c1168a6c445012f288005062bf23d2b36e3e0e78bc469cbfc6e71e45d52f456113121422e230c6edc1dd2a2349e1878757526df962f5019a25277cf698134c7a90f05ccbb0fae7e29ac028f05c7928c8318f9b2249369281be843fb5676a718be7b3fc8464427083bd7b8706997485c7d57ca9e932347f4cdde77de8faa692e24baed419f4b88e681dcdf6ff8dc4c5ea1f3eca2028441a80d73092b4134faca4f71ba898e3185e032ebeda368c64b89cd29482fd193e3df0ba6596c7e141b55e4875d88541dab3fec9ba6695522ae60a1c9c69bb3b65a9ae30834a92ed03a619244e1cc45a8f8519d941c8ade69cf9c29f0224ad14b1bb49369c875</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="区块链" scheme="https://aizlm.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Springboot-自动配置原理解析</title>
    <link href="https://aizlm.github.io/2022/06/03/Springboot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://aizlm.github.io/2022/06/03/Springboot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-06-02T23:16:10.000Z</published>
    <updated>2022-06-04T03:38:32.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-自动配置源码分析"><a href="#SpringBoot-自动配置源码分析" class="headerlink" title="SpringBoot-自动配置源码分析"></a>SpringBoot-自动配置源码分析</h1><p>SpringBoot自动配置导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxx-AutoConfiguration</p><h2 id="WebMvcAutoConfiguration"><a href="#WebMvcAutoConfiguration" class="headerlink" title="WebMvcAutoConfiguration"></a>WebMvcAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false//不设置代理bean，也就是内部bean会实例化多个对象，不走代理，提升效率，前提是bean之间没有依赖关系</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET//当前程序是否是servlet原生程序，springboot的webmvc程序分为响应式程序/servlet原生程序</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span><span class="comment">//在这几个类存在时以下配置生效，因为导入了springboot-webmvc包，所以必然存在</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span> <span class="comment">//不存在此类时生效</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span> <span class="comment">//优先级</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;WebProperties.class&#125;)</span> <span class="comment">//配置绑定</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@ConfigurationProperties</span>(&quot;spring.web&quot;)</span></span><br><span class="line"><span class="comment">public class WebProperties &#123;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//当前类只有有参构造器，其形参都会在容器中找到并自动注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnableWebMvcConfiguration</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties, WebProperties webProperties, ObjectProvider&lt;WebMvcRegistrations&gt; mvcRegistrationsProvider, ObjectProvider&lt;WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider, ListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceProperties = (Resources)(resourceProperties.hasBeenCustomized() ? resourceProperties : webProperties.getResources());</span><br><span class="line">        <span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">        <span class="built_in">this</span>.webProperties = webProperties;</span><br><span class="line">        <span class="built_in">this</span>.mvcRegistrations = (WebMvcRegistrations)mvcRegistrationsProvider.getIfUnique();</span><br><span class="line">        <span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = (WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer)resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory; <span class="comment">//spring容器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//静态资源处理器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123; <span class="comment">// 默认配置为true</span></span><br><span class="line">            logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//映射的静态资源路径从/META-INF/resources/webjars/和CLASSPATH_RESOURCE_LOCATIONS获取</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">            <span class="built_in">this</span>.addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>); </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]&#123;&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;&#125;;</span></span><br><span class="line"><span class="comment">private String[] staticLocations;</span></span><br><span class="line"><span class="comment">public Resources() &#123;</span></span><br><span class="line"><span class="comment">     this.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span></span><br><span class="line"><span class="comment">            this.addMappings = true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="built_in">this</span>.addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">                registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations()); <span class="comment">//从绑定的properties文件对应的配置类中读取spring.web.resources.static-locations: [...] </span></span><br><span class="line">                <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">                    registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">Resource</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(servletContext, <span class="string">&quot;/&quot;</span>)&#125;); <span class="comment">//如果是个servlet原生程序，则把其上下文的根路径也加入进来</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//欢迎页资源映射</span></span><br><span class="line"><span class="comment">//HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求.</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">        <span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(<span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, <span class="built_in">this</span>.getWelcomePage(), <span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">        welcomePageHandlerMapping.setInterceptors(<span class="built_in">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">        welcomePageHandlerMapping.setCorsConfigurations(<span class="built_in">this</span>.getCorsConfigurations());</span><br><span class="line">        <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//欢迎页映射构造器</span></span><br><span class="line">    WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders, ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;</span><br><span class="line">        <span class="keyword">if</span> (welcomePage != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123; <span class="comment">//welcomePage为静态文件index.html以及staticPathPattern(请求路径匹配)没有前缀时生效，这也是为什么配置了staticPathPattern不为&quot;/**&quot;时，欢迎页访问不了的原因所在.</span></span><br><span class="line">            logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">            <span class="built_in">this</span>.setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小知识点：favicon，即显示网页图标，浏览器会发送 &#x2F;favicon 请求获取到图标，整个session期间不再获取，session生命周期是浏览器开启到关闭时生效的时间。</li></ul><h2 id="Rest风格请求方式源码解析"><a href="#Rest风格请求方式源码解析" class="headerlink" title="Rest风格请求方式源码解析"></a>Rest风格请求方式源码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;HiddenHttpMethodFilter.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.mvc.hiddenmethod.filter&quot;,</span></span><br><span class="line"><span class="meta">    name = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = false //如果没配置则不开启</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">requestToUse</span> <span class="operator">=</span> request;</span><br><span class="line"><span class="comment">//请求方式为post且请求没有异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public static final String DEFAULT_METHOD_PARAM = &quot;_method&quot;;</span></span><br><span class="line"><span class="comment">private String methodParam = DEFAULT_METHOD_PARAM;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">            <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">        private static final List&lt;String&gt; ALLOWED_METHODS = Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">                requestToUse = <span class="keyword">new</span> <span class="title class_">HttpMethodRequestWrapper</span>(request, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">        <span class="built_in">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot-自动配置源码分析&quot;&gt;&lt;a href=&quot;#SpringBoot-自动配置源码分析&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-自动配置源码分析&quot;&gt;&lt;/a&gt;SpringBoot-自动配置源码分析&lt;/h1&gt;&lt;p&gt;Sp</summary>
      
    
    
    
    
    <category term="源码分析捏" scheme="https://aizlm.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合</title>
    <link href="https://aizlm.github.io/2022/05/19/SSM%E6%95%B4%E5%90%88/"/>
    <id>https://aizlm.github.io/2022/05/19/SSM%E6%95%B4%E5%90%88/</id>
    <published>2022-05-19T07:26:49.000Z</published>
    <updated>2022-05-28T05:11:06.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><ul><li>mapper.xml：与数据库进行交互。<ul><li>配置需要包含数据库连接池，数据源（哪个数据库）</li><li>SqlSessionFactory绑定mybatis.xml（数据具体操作），然后SqlSession对象从SqlSessionFactory中获取</li><li>配置MapperScannerConfigurer对象，指定mapper类扫描路径</li></ul></li><li>service.xml：只配置了包扫描，指定需要扫描到Spring 的Service层所在的包路径</li><li>mvc.xml：配置了Spring MVC扫描的包路径和注解驱动</li><li>web.xml：配置了项目启动时加载的信息<ul><li>配置文件加载context-param-&gt;contextConfigLocation</li><li>Spring容器加载监听器ContextLoaderListener</li><li>SpringMVC前端控制器DispatcherServlet</li></ul></li></ul><p>spring容器的创建：在web.xml声明了监听器ContextLoadListenter，。功能是创建spring容器对象WebApplicationContext，在创建WebApplicationContext对象时读取spring配置文件。读取文件的时候，遇到bean标签或者注解，就能创建service,dao等对象，放到容器中。</p><p>springMVC容器：在web.xml声明了中央调度器DispatcherServlet。在这个servlet的init方法中，创建了容器对象WebApplicationContext在创建WebApplicationContext对象，读取springmvc配置文件，读取文件的时候，遇到@Controller注解，创建控制器controller对象，放到容器中。</p><p>servlet(jsp) -&gt; tomcat -&gt; mybatis -&gt; spring -&gt; springmvc -&gt; springboot -&gt; </p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>在Idea中，xml配置引入外部bean需要以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】项目来源：</p><p>【2】SSM纯注解开发：<a href="https://blog.csdn.net/weixin_53805188/article/details/124103988">https://blog.csdn.net/weixin_53805188/article/details/124103988</a></p><p>【3】<a href="https://blog.csdn.net/m0_54703880/article/details/122637877?utm_source=app&amp;app_version=5.1.1">https://blog.csdn.net/m0_54703880/article/details/122637877?utm_source=app&amp;app_version=5.1.1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SSM整合&quot;&gt;&lt;a href=&quot;#SSM整合&quot; class=&quot;headerlink&quot; title=&quot;SSM整合&quot;&gt;&lt;/a&gt;SSM整合&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;mapper.xml：与数据库进行交互。&lt;ul&gt;
&lt;li&gt;配置需要包含数据库连接池，数据源（哪个数据库）</summary>
      
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>flink学习</title>
    <link href="https://aizlm.github.io/2022/05/07/flink%E5%AD%A6%E4%B9%A0/"/>
    <id>https://aizlm.github.io/2022/05/07/flink%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-05-06T23:54:32.000Z</published>
    <updated>2022-05-07T02:33:40.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flink学习"><a href="#flink学习" class="headerlink" title="flink学习"></a>flink学习</h1><ul><li>特点<ul><li>低延迟</li><li>高吞吐</li><li>准确率高、容错率小</li></ul></li><li>需要处理的问题<ul><li>集群环境下，如何正确访问数据进行处理？</li><li>集群环境下，数据处理错误，如何进行回滚到初始状态进行正确处理分析数据？</li></ul></li></ul><h2 id="flink-amp-WordCount"><a href="#flink-amp-WordCount" class="headerlink" title="flink &amp; WordCount"></a>flink &amp; WordCount</h2><h3 id="Batch（弃用DataSet）"><a href="#Batch（弃用DataSet）" class="headerlink" title="Batch（弃用DataSet）"></a>Batch（弃用DataSet）</h3><ul><li>目录结构</li></ul><img src="/2022/05/07/flink%E5%AD%A6%E4%B9%A0/image-20220507095140469.png"><ul><li>批处理代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建环境</span></span><br><span class="line"><span class="type">ExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 读取数据</span></span><br><span class="line">DataSource&lt;String&gt; wordDataSource = env.readTextFile(<span class="string">&quot;input/words.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将每行数据进行分词，转换成二元组</span></span><br><span class="line">FlatMapOperator&lt;String, Tuple2&lt;String, Long&gt;&gt; wordAndOneTuple = wordDataSource.flatMap((String line, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 3.1 将一行数据进行分词</span></span><br><span class="line">    String[] words = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="comment">// 3.2 将单词转换成二元组</span></span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        out.collect(Tuple2.of(word, <span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).returns(Types.TUPLE(Types.STRING, Types.LONG));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 根据元组word进行分组</span></span><br><span class="line">UnsortedGrouping&lt;Tuple2&lt;String, Long&gt;&gt; wordAndOneGroup = wordAndOneTuple.groupBy(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 分组后累积单词数</span></span><br><span class="line">AggregateOperator&lt;Tuple2&lt;String, Long&gt;&gt; sum = wordAndOneGroup.sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sum.print();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(java,1)</span><br><span class="line">(flink,1)</span><br><span class="line">(world,1)</span><br><span class="line">(hello,3)</span><br></pre></td></tr></table></figure><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>有界流处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">DataStreamSource&lt;String&gt; wordDataStreamSource = env.readTextFile(<span class="string">&quot;input/words.txt&quot;</span>);</span><br><span class="line">SingleOutputStreamOperator&lt;Tuple2&lt;String, Long&gt;&gt; wordAndOneTuple = wordDataStreamSource.flatMap((String line, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out) -&gt; &#123;</span><br><span class="line">    String[] words = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        out.collect(Tuple2.of(word, <span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).returns(Types.TUPLE(Types.STRING, Types.LONG));</span><br><span class="line">KeyedStream&lt;Tuple2&lt;String, Long&gt;, String&gt; wordAndOneKeyedStream = wordAndOneTuple.keyBy(data -&gt; data.f0);</span><br><span class="line">SingleOutputStreamOperator&lt;Tuple2&lt;String, Long&gt;&gt; sum = wordAndOneKeyedStream.sum(<span class="number">1</span>);</span><br><span class="line">sum.print();</span><br><span class="line"><span class="comment">// 流处理会不断等待输入流，启动执行</span></span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&gt; (java,1)</span><br><span class="line">2&gt; (hello,1)</span><br><span class="line">3&gt; (world,1)</span><br><span class="line">2&gt; (hello,2)</span><br><span class="line">4&gt; (flink,1)</span><br><span class="line">2&gt; (hello,3)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flink学习&quot;&gt;&lt;a href=&quot;#flink学习&quot; class=&quot;headerlink&quot; title=&quot;flink学习&quot;&gt;&lt;/a&gt;flink学习&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;特点&lt;ul&gt;
&lt;li&gt;低延迟&lt;/li&gt;
&lt;li&gt;高吞吐&lt;/li&gt;
&lt;li&gt;准确率高、容错</summary>
      
    
    
    
    
    <category term="web学习捏" scheme="https://aizlm.github.io/tags/web%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>jenkins自动部署</title>
    <link href="https://aizlm.github.io/2022/05/05/jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://aizlm.github.io/2022/05/05/jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2022-05-05T07:08:40.000Z</published>
    <updated>2022-06-15T03:46:48.885Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4978d121fcd7cf8948e5c39139f921a138d497685ca443a5723d4f481cb953ce"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>ES使用（无原理）</title>
    <link href="https://aizlm.github.io/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://aizlm.github.io/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-27T00:36:25.000Z</published>
    <updated>2022-04-28T07:53:47.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>文档型数据库，非关系型数据库结构：</p><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/146a779da01f53e7f7a8d53132d3c7cf.png"><p>倒序排序：</p><p>将原本通过ID查询的内容，进行分词操作，映射到相应的id中。</p><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427084342277.png"><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><ul><li>访问地址见项目README；</li></ul><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427094347169.png"><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427095722738.png"><p>chain-dev-*为索引，类似于关系型数据库中为DataBase，索引名字在logstash中定义，具体可见README_ELK；<br>可用字段为收集到的日志所对应的标签值，常用搜索的标签为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chain-dev-2022.04.27&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span><span class="comment">// 文档，可认为是收集到的数据</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;q52paIABsSUfygaQAH36&quot;</span><span class="punctuation">,</span><span class="comment">// 由ES随机生成</span></span><br><span class="line">  <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">// 收集的数据</span></span><br><span class="line">    <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-04-27T01:35:47.849Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;231ms&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;thread_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http-nio-10000-exec-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;logger_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cn.jnu.web.base.LogAspect&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;traceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a6a9eb6b47a98d75&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spanId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8a68f9e630edd054&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">48268</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;springAppName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;service-auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;level_value&quot;</span><span class="punctuation">:</span> <span class="number">20000</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>@timestamp：时间，可通过console范围搜索</li><li>host：ip</li><li>logger_name：全类名</li><li>springAppName：微服务名称</li><li>traceId：链路追踪，全链路查询日志时使用<ul><li>通过页面响应头有个RequestId进行查询ELK中的traceId</li></ul></li></ul><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427100448369.png"><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427100615257.png"><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>两种方式：</p><ul><li>第一种：直接使用Kibana查询语言KQL进行查询</li></ul><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427102012936.png"><ul><li>第二种：通过console传输json，可以进行聚类、模糊等查询</li></ul><p>console：</p><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427084444128.png"><h2 id="以表UI形式显示"><a href="#以表UI形式显示" class="headerlink" title="以表UI形式显示"></a>以表UI形式显示</h2><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/29150985243f4b28c37c7bdcfe4af95.png"><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8f92455ef35dc64f5e89cef8af59e99.png"><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><p>集群的概念及作用：详见【2】29</p><ul><li>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</li><li>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。</li></ul></li><li><p>数据分片及副本：详见【2】33</p><ul><li>原因：一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10 亿文档数据的索引占据1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。 或者单个节点处理搜索请求，响应太慢。</li><li>集群有新节点加入时，ES帮助我们直接进行分片控制。</li></ul></li></ul><h2 id="查询原理"><a href="#查询原理" class="headerlink" title="查询原理"></a>查询原理</h2><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427102333654.png"><ul><li>路由计算：详见【2】39</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】ELK查看DSL：<a href="https://blog.csdn.net/JSWANGCHANG/article/details/121356812">https://blog.csdn.net/JSWANGCHANG/article/details/121356812</a></p><p>【2】ES完整笔记：<a href="https://blog.csdn.net/u011863024/article/details/115721328">https://blog.csdn.net/u011863024/article/details/115721328</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;traceId&quot;: &quot;a6a9eb6b47a98d75&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;sort&quot;:&#123;</span><br><span class="line">&quot;@timestamp&quot;:&#123;</span><br><span class="line">&quot;order&quot;:&quot;desc&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ELK&quot;&gt;&lt;a href=&quot;#ELK&quot; class=&quot;headerlink&quot; title=&quot;ELK&quot;&gt;&lt;/a&gt;ELK&lt;/h1&gt;&lt;h2 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>mybatis简单学习</title>
    <link href="https://aizlm.github.io/2022/04/19/mybatis%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://aizlm.github.io/2022/04/19/mybatis%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-04-19T02:47:18.000Z</published>
    <updated>2022-05-19T07:27:55.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p>为啥要用工厂模式捏？：<a href="https://baijiahao.baidu.com/s?id=1705504841108391352&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1705504841108391352&amp;wfr=spider&amp;for=pc</a></p></li><li><p>尚硅谷mybatis：<a href="https://blog.csdn.net/qq_19387933/article/details/123256034">https://blog.csdn.net/qq_19387933/article/details/123256034</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>区块链认知</title>
    <link href="https://aizlm.github.io/2022/04/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E7%9F%A5/"/>
    <id>https://aizlm.github.io/2022/04/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E7%9F%A5/</id>
    <published>2022-04-13T01:50:07.000Z</published>
    <updated>2022-06-01T11:48:17.712Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="657d539d58322e56752f4db1f96da9884810dd8ed6efc428edee4617dd034662"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="区块链" scheme="https://aizlm.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Android虚拟化&amp;容器</title>
    <link href="https://aizlm.github.io/2022/04/11/Android%E8%99%9A%E6%8B%9F%E5%8C%96-%E5%AE%B9%E5%99%A8/"/>
    <id>https://aizlm.github.io/2022/04/11/Android%E8%99%9A%E6%8B%9F%E5%8C%96-%E5%AE%B9%E5%99%A8/</id>
    <published>2022-04-11T08:49:09.000Z</published>
    <updated>2022-04-12T01:54:00.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android虚拟化"><a href="#Android虚拟化" class="headerlink" title="Android虚拟化"></a>Android虚拟化</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android虚拟化&quot;&gt;&lt;a href=&quot;#Android虚拟化&quot; class=&quot;headerlink&quot; title=&quot;Android虚拟化&quot;&gt;&lt;/a&gt;Android虚拟化&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Android逆向知识" scheme="https://aizlm.github.io/tags/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2021KCTF4偶遇棋痴</title>
    <link href="https://aizlm.github.io/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/"/>
    <id>https://aizlm.github.io/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/</id>
    <published>2022-04-10T14:01:55.000Z</published>
    <updated>2022-04-11T08:19:06.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四题-偶遇棋痴"><a href="#第四题-偶遇棋痴" class="headerlink" title="第四题 偶遇棋痴"></a>第四题 偶遇棋痴</h1><ul><li>Java层：</li></ul><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220304084.png"><ul><li>native静态分析：静态注册</li></ul><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220342932.png"><p>目标是返回1，所以需要到LABEL_11得到v3&#x3D;1然后return掉。</p><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220538797.png"><p>输入字符位数14，然后到第二个箭头时，v5是30，获取一下v15，再看v15经过sub_39614()变成了什么，最后到LABEL_11。</p><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220838527.png"><h1 id="IDA函数映射"><a href="#IDA函数映射" class="headerlink" title="IDA函数映射"></a>IDA函数映射</h1><ul><li>_aeabi_memclr8：memset</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第四题-偶遇棋痴&quot;&gt;&lt;a href=&quot;#第四题-偶遇棋痴&quot; class=&quot;headerlink&quot; title=&quot;第四题 偶遇棋痴&quot;&gt;&lt;/a&gt;第四题 偶遇棋痴&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Java层：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/04/10/</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>从0开始！</title>
    <link href="https://aizlm.github.io/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/"/>
    <id>https://aizlm.github.io/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/</id>
    <published>2022-04-10T06:07:00.000Z</published>
    <updated>2022-04-11T08:19:29.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新学习Android应用开发"><a href="#重新学习Android应用开发" class="headerlink" title="重新学习Android应用开发"></a>重新学习Android应用开发</h1><p>写着一篇主要是发现了自己虽然能理解流程，但很慢且不能看到流程马上想到如何实现，这不好，所以重新开始。主要记录开发中学习到的新的知识点，干巴爹！</p><ul><li>问题：xml布局文件的内容如何转变为View对象？</li></ul><p>aapt（Android Asset Packaging Tool）将布局文件资源编译压缩紧凑后，打包到.apk文件中。</p><p>Activity的子类的onCreate(Bundle)方法调用setContentView(…)方法时， Activity的子类使用LayoutInflater类实例化布局文件中定义的每一个View对象。</p><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220408212807086.png"><p>利用ClassLoader加载实例，ClassLoader中的双亲委派机制也很重要！</p><ul><li>Activity生命周期以及对应内存、用户可见、前台关系？</li></ul><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220409161849607.png"><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220409161928532.png"><ul><li>问题：如何在app下一次启动时，还原到上一次的状态？</li></ul><p>例如：旋转时，app会先销毁实例，走完一个Activity的生命周期，再调用Activity的onCreate、onStart、onResume方法，将app的当前Activity显示到前台中。</p><p>解决方案：重写onSaveInstanceState(Bundle outState)函数，将需要保存的状态以bundle的形式写入到outState中，在onCreate(Bundle savedInstanceState)下次调用的时候，从中取相应数据。</p><p>但需要注意的是这种方法，在完全退出时，调用的onDestory()销毁掉实例时，不会保存outState Bundle，因为Activity实例已经不存在于内存当中了。</p><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220410135836647.png"><p>实例暂存态（onStop()处理永久性数据，onSaveInstanceState处理暂存态数据）：在彻底销毁和重启系统时，暂存态数据会被清除。</p><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220410144259030.png"><h1 id="Github上传代码"><a href="#Github上传代码" class="headerlink" title="Github上传代码"></a>Github上传代码</h1><ul><li><a href="https://www.bilibili.com/read/cv10612248/">https://www.bilibili.com/read/cv10612248/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重新学习Android应用开发&quot;&gt;&lt;a href=&quot;#重新学习Android应用开发&quot; class=&quot;headerlink&quot; title=&quot;重新学习Android应用开发&quot;&gt;&lt;/a&gt;重新学习Android应用开发&lt;/h1&gt;&lt;p&gt;写着一篇主要是发现了自己虽然能理解流</summary>
      
    
    
    
    
    <category term="Android应用开发" scheme="https://aizlm.github.io/tags/Android%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>看雪CM3</title>
    <link href="https://aizlm.github.io/2022/04/07/%E7%9C%8B%E9%9B%AACM3/"/>
    <id>https://aizlm.github.io/2022/04/07/%E7%9C%8B%E9%9B%AACM3/</id>
    <published>2022-04-07T12:00:19.000Z</published>
    <updated>2022-04-09T08:03:16.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪CM3"><a href="#看雪CM3" class="headerlink" title="看雪CM3"></a>看雪CM3</h1><p>运行之后发现是个简单输入验证码界面。</p><ul><li>Java层静态分析：xml中application没有debuggable选项，有backup可能会诱发漏洞点。</li></ul><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103138716.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103334441.png"><ul><li>so层静态分析：在导出函数中没有找到静态注册的函数名，进JNI_OnLoad中进行分析，一开始忽略了反调试，j_AD()为反调试函数，这里的反调试只是检测进程是否被附加调试进程。</li></ul><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103612257.png"><p>j_AD()：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103850827.png"><ul><li>so层动态分析：需要在so加载时进行截断，绕过反调试函数。</li></ul><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328110339719.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328115316040.png"><p>定位到RegisterNatives处，发现参数可以跳转到另一个地址，根据RegisterNative参数JNINativeMethod一一对应上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jint</span> (*RegisterNatives)(JNIEnv*, jclass, <span class="type">const</span> JNINativeMethod*, jint);</span><br></pre></td></tr></table></figure><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122115020.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122450998.png"><p>函数名：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122640761.png"><p>签名：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122759864.png"><p>地址：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328123029740.png"><ul><li>动态分析找到对应函数，定位到bc函数：</li></ul><p>执行一下任意字符，然后发现出现 Password Error~ 字样，没有经过j_dc函数，说明是由j_wolf_de和j_st其中一个进行显示的。</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407221122867.png"><p>j_dc涉及到的参数都是环境和系统上下文，没必要看。</p><p>进入j_jk看到一样的j_wolf_de与j_st，重点在j_dc里面，需要返回的result是1，进入分析发现，最终到ds函数：需要返回1，则v8&#x3D;1，这里的v3与v4通过sub_15184进行转换，v4又由j_wolf_de得到，则去hook相应的j_wolf_de方法，获取得到v4。</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407223939145.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407224145304.png"><p>hook代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> wolf_de_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libwolf.so&quot;</span>, <span class="string">&quot;_Z7wolf_dePKc&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wolf_de_addr:&quot;</span>+wolf_de_addr);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(wolf_de_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***orgin: &quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="keyword">var</span> key = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;636D55B2AA8609CB&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***trueKey: &quot;</span> + key);</span><br><span class="line">            <span class="keyword">var</span> truechr = env.<span class="title function_">getStringUtfChars</span>(key, <span class="number">0</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***trueJstring: &quot;</span> + truechr.<span class="title function_">readCString</span>());</span><br><span class="line">            args[<span class="number">0</span>] = truechr;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***changeJstring: &quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***return: &quot;</span> + retval.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407221053077.png"><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】静态反调试：<a href="http://www.zhaoxiaodan.com/java/android/android-native%E5%8F%8D%E8%B0%83%E8%AF%95.html">http://www.zhaoxiaodan.com/java/android/android-native%E5%8F%8D%E8%B0%83%E8%AF%95.html</a></p><p>【2】动态注册：<a href="https://blog.csdn.net/leifengpeng/article/details/52447864">https://blog.csdn.net/leifengpeng/article/details/52447864</a></p><h1 id="hook注意事项"><a href="#hook注意事项" class="headerlink" title="hook注意事项"></a>hook注意事项</h1><ul><li>如何获取native需要hook的函数名</li></ul><p>frida：Module.enumerateExports(“libwolf.so”)</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407225503552.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;看雪CM3&quot;&gt;&lt;a href=&quot;#看雪CM3&quot; class=&quot;headerlink&quot; title=&quot;看雪CM3&quot;&gt;&lt;/a&gt;看雪CM3&lt;/h1&gt;&lt;p&gt;运行之后发现是个简单输入验证码界面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java层静态分析：xml中application没</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>加固的了解</title>
    <link href="https://aizlm.github.io/2022/04/03/%E5%8A%A0%E5%9B%BA%E7%9A%84%E4%BA%86%E8%A7%A3/"/>
    <id>https://aizlm.github.io/2022/04/03/%E5%8A%A0%E5%9B%BA%E7%9A%84%E4%BA%86%E8%A7%A3/</id>
    <published>2022-04-03T14:17:32.000Z</published>
    <updated>2022-04-12T01:54:33.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android加固认知"><a href="#Android加固认知" class="headerlink" title="Android加固认知"></a>Android加固认知</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】入门级加固：<a href="https://bbs.pediy.com/thread-255220.htm?source=1">https://bbs.pediy.com/thread-255220.htm?source=1</a></p><p>【2】ClassLoader：<a href="https://www.cnblogs.com/renhui/articles/14268203.html">https://www.cnblogs.com/renhui/articles/14268203.html</a></p><p>【3】（未看）ClassLoader：<a href="https://zhuanlan.zhihu.com/p/81293598">https://zhuanlan.zhihu.com/p/81293598</a></p><ul><li>【4】动态加载系列<ul><li><a href="https://www.jianshu.com/p/fb03c2b59241">https://www.jianshu.com/p/fb03c2b59241</a></li></ul></li></ul><p>【5】shuwoom大佬的加固理解与实现：<a href="https://shuwoom.com/?p=360#1014_Dex%E6%95%B4%E4%BD%93%E5%8A%A0%E5%9B%BA%E5%8E%9F%E7%90%86">https://shuwoom.com/?p=360#1014_Dex%E6%95%B4%E4%BD%93%E5%8A%A0%E5%9B%BA%E5%8E%9F%E7%90%86</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android加固认知&quot;&gt;&lt;a href=&quot;#Android加固认知&quot; class=&quot;headerlink&quot; title=&quot;Android加固认知&quot;&gt;&lt;/a&gt;Android加固认知&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Android逆向知识" scheme="https://aizlm.github.io/tags/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>调试配置问题汇总</title>
    <link href="https://aizlm.github.io/2022/03/28/%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://aizlm.github.io/2022/03/28/%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2022-03-28T02:27:16.000Z</published>
    <updated>2022-04-09T08:02:59.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android调试配置"><a href="#Android调试配置" class="headerlink" title="Android调试配置"></a>Android调试配置</h1><ul><li><p>DDMS，ro.debuggable显示进程：<a href="https://blog.csdn.net/jinmie0193/article/details/111355867">https://blog.csdn.net/jinmie0193/article/details/111355867</a></p></li><li><p>动态调试环境搭建：<a href="https://www.kanxue.com/chm.htm?id=15454&amp;pid=node1001581">https://www.kanxue.com/chm.htm?id=15454&amp;pid=node1001581</a></p></li><li><p>记录几个常用的命令</p><ul><li>jdb -connect com.sun.jdi.SocketAttach:hostname&#x3D;127.0.0.1,port&#x3D;8700</li><li>adb forward tcp:8700 jwdp:</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android调试配置&quot;&gt;&lt;a href=&quot;#Android调试配置&quot; class=&quot;headerlink&quot; title=&quot;Android调试配置&quot;&gt;&lt;/a&gt;Android调试配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DDMS，ro.debuggable显示进程：&lt;a</summary>
      
    
    
    
    
    <category term="Android调试配置" scheme="https://aizlm.github.io/tags/Android%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>frida的认知</title>
    <link href="https://aizlm.github.io/2022/03/24/frida%E7%9A%84%E8%AE%A4%E7%9F%A5/"/>
    <id>https://aizlm.github.io/2022/03/24/frida%E7%9A%84%E8%AE%A4%E7%9F%A5/</id>
    <published>2022-03-24T13:44:53.000Z</published>
    <updated>2022-04-11T08:49:39.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frida的认知"><a href="#frida的认知" class="headerlink" title="frida的认知"></a>frida的认知</h1><p>钩子，永远的神！</p><h2 id="场景1-改TextView"><a href="#场景1-改TextView" class="headerlink" title="场景1 改TextView"></a>场景1 改TextView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;SetTextI18n&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeTextViewClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> findViewById(R.id.textview);</span><br><span class="line">        textView.setText(<span class="string">&quot;aizlm&quot;</span>); <span class="comment">// hook这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改tv的话，一开始的想法是去锁定一个tv，然后在找成员方法进行修改string完成，发现好像不得行，网上看到了别人的思路，大概就是去hook TextView的setText()方法，在这个方法进行重写即可（放一次python，后面都用js了）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">send(&quot;Script loaded successfully &quot;);</span></span><br><span class="line"><span class="string">Java.perform(function x() &#123;</span></span><br><span class="line"><span class="string">    send(&quot;Inside java perform function&quot;);</span></span><br><span class="line"><span class="string">    // Java.use 相当于 Class.forName() 拿到对应的Class而不是直接实例化一个对象，如果需要实例化需要调用$new()</span></span><br><span class="line"><span class="string">    var tv_clz = Java.use(&quot;android.widget.TextView&quot;);</span></span><br><span class="line"><span class="string">    // 当函数有多个重载方法时，用overload关键字</span></span><br><span class="line"><span class="string">    tv_clz.setText.overload(&quot;java.lang.CharSequence&quot;).implementation = function(x) &#123;</span></span><br><span class="line"><span class="string">        send(&quot;before change:&quot; + x.toString());</span></span><br><span class="line"><span class="string">        var info = Java.use(&quot;java.lang.String&quot;).$new(&quot;aizlm be changed!&quot;);</span></span><br><span class="line"><span class="string">        // this 指针指向当前的类实例tv_clz</span></span><br><span class="line"><span class="string">        this.setText(info);</span></span><br><span class="line"><span class="string">        send(&quot;after change:&quot; + info);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&#x27;com.example.hooktest&#x27;</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><ul><li>但这里有个问题就是，hook底层那就不能指定对一个特定的tv进行修改了，思路就是加个id判定：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">send</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">send</span>(<span class="string">&quot;Inside java perform function&quot;</span>);</span><br><span class="line">    <span class="comment">// 属性值</span></span><br><span class="line">    <span class="keyword">var</span> tv_id = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.hooktest.R$id&quot;</span>).<span class="property">textview</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">send</span>(<span class="string">&quot;tv_id:&quot;</span> + tv_id);</span><br><span class="line">    <span class="keyword">var</span> tv_clz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.TextView&quot;</span>);</span><br><span class="line">    tv_clz.<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.CharSequence&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> info = x.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;before change:&quot;</span> + info);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getId</span>() == tv_id) &#123; <span class="comment">// tv_id 替换成0时</span></span><br><span class="line">            info = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;aizlm be changed!&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setText</span>(info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;after change:&quot;</span> + info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>log：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Script loaded successfully </span><br><span class="line">[*] Inside java perform function</span><br><span class="line">[*] tv_id:2131231159</span><br><span class="line">[*] before change:aizlm</span><br><span class="line">[*] after change:aizlm be changed!</span><br><span class="line">// tv_id 替换成0时</span><br><span class="line">[*] before change:aizlm</span><br><span class="line">[*] after change:aizlm</span><br></pre></td></tr></table></figure><p>…未完，hook知识深不见底，寄</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】<a href="https://bbs.pediy.com/thread-227232.htm">https://bbs.pediy.com/thread-227232.htm</a></p><p>【2】<a href="https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A02/README.md">https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A02/README.md</a></p><p>【3】常见hook对象：<a href="https://blog.csdn.net/tianyi19/article/details/121771736">https://blog.csdn.net/tianyi19/article/details/121771736</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;frida的认知&quot;&gt;&lt;a href=&quot;#frida的认知&quot; class=&quot;headerlink&quot; title=&quot;frida的认知&quot;&gt;&lt;/a&gt;frida的认知&lt;/h1&gt;&lt;p&gt;钩子，永远的神！&lt;/p&gt;
&lt;h2 id=&quot;场景1-改TextView&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="Android逆向知识" scheme="https://aizlm.github.io/tags/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>看雪CM2</title>
    <link href="https://aizlm.github.io/2022/03/24/%E7%9C%8B%E9%9B%AACM2/"/>
    <id>https://aizlm.github.io/2022/03/24/%E7%9C%8B%E9%9B%AACM2/</id>
    <published>2022-03-24T09:28:12.000Z</published>
    <updated>2022-04-09T08:03:12.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪CM2"><a href="#看雪CM2" class="headerlink" title="看雪CM2"></a>看雪CM2</h1><p>so层代码出乎意料的简单，不贴payload了，这题重点在于反调试，应该是个双进程守护，手机不知道出了什么毛病，在一个师傅那可以正常显示，而我不行，应该是把所有调试手段都卸掉了，就离谱。</p><p>先码一下，后面再回来康康。</p><ul><li>logcat：</li></ul><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/a27ef716c12b60c1ff924cd261ed9a9.png" style="zoom:80%;"><ul><li>Java层：</li></ul><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/image-20220324212359483.png" style="zoom:100%;"><ul><li>so层：v3是传入对比的flag，v4是虚拟机环境参数env</li></ul><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/image-20220324212437133.png" style="zoom: 80%;"><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/image-20220324212648216.png" style="zoom: 90%;"><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】题目来源：<a href="https://www.kanxue.com/chm.htm?id=14147&amp;pid=node1001296">https://www.kanxue.com/chm.htm?id=14147&amp;pid=node1001296</a></p><p>【2】双进程守护：<a href="https://blog.csdn.net/huaxun66/article/details/53158162">https://blog.csdn.net/huaxun66/article/details/53158162</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;看雪CM2&quot;&gt;&lt;a href=&quot;#看雪CM2&quot; class=&quot;headerlink&quot; title=&quot;看雪CM2&quot;&gt;&lt;/a&gt;看雪CM2&lt;/h1&gt;&lt;p&gt;so层代码出乎意料的简单，不贴payload了，这题重点在于反调试，应该是个双进程守护，手机不知道出了什么毛病，在一</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>默认配置漏洞分析</title>
    <link href="https://aizlm.github.io/2022/03/20/%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://aizlm.github.io/2022/03/20/%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2022-03-20T06:19:08.000Z</published>
    <updated>2022-04-09T08:03:20.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="默认配置威胁"><a href="#默认配置威胁" class="headerlink" title="默认配置威胁"></a>默认配置威胁</h1><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><p>简单说一下，感觉比较简单。</p><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag"><span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、首先将app中存储的数据给备份下来（<br>adb backup -f allowBackup.ab -noapk com.mwr.example.sieve），解压用abe<br>2、然后在其他手机（或者重新安装）把备份的数据给还原回去（<br>adb restore allowBackup.ab），这时候之前手机设置的密码就被绕过了（实际上就是把数据库扔到这边）</p><p>…待学习WebView</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;默认配置威胁&quot;&gt;&lt;a href=&quot;#默认配置威胁&quot; class=&quot;headerlink&quot; title=&quot;默认配置威胁&quot;&gt;&lt;/a&gt;默认配置威胁&lt;/h1&gt;&lt;h2 id=&quot;数据备份&quot;&gt;&lt;a href=&quot;#数据备份&quot; class=&quot;headerlink&quot; title=&quot;数</summary>
      
    
    
    
    
    <category term="android漏洞" scheme="https://aizlm.github.io/tags/android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
