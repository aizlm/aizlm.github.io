<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aizlm‘s_Blog</title>
  
  <subtitle>瞎学日记</subtitle>
  <link href="https://aizlm.github.io/atom.xml" rel="self"/>
  
  <link href="https://aizlm.github.io/"/>
  <updated>2022-06-03T02:09:52.325Z</updated>
  <id>https://aizlm.github.io/</id>
  
  <author>
    <name>Aizlm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot-自动配置原理解析</title>
    <link href="https://aizlm.github.io/2022/06/03/Springboot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://aizlm.github.io/2022/06/03/Springboot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-06-02T23:16:10.000Z</published>
    <updated>2022-06-03T02:09:52.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-自动配置源码分析"><a href="#SpringBoot-自动配置源码分析" class="headerlink" title="SpringBoot-自动配置源码分析"></a>SpringBoot-自动配置源码分析</h1><p>SpringBoot自动配置导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxx-AutoConfiguration</p><h2 id="WebMvcAutoConfiguration"><a href="#WebMvcAutoConfiguration" class="headerlink" title="WebMvcAutoConfiguration"></a>WebMvcAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false//不设置代理bean，也就是内部bean会实例化多个对象，不走代理，提升效率，前提是bean之间没有依赖关系</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET//当前程序是否是servlet原生程序，springboot的webmvc程序分为响应式程序/servlet原生程序</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span><span class="comment">//在这几个类存在时以下配置生效，因为导入了springboot-webmvc包，所以必然存在</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span> <span class="comment">//不存在此类时生效</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span> <span class="comment">//优先级</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;WebProperties.class&#125;)</span> <span class="comment">//配置绑定</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@ConfigurationProperties</span>(&quot;spring.web&quot;)</span></span><br><span class="line"><span class="comment">public class WebProperties &#123;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//当前类只有有参构造器，其形参都会在容器中找到并自动注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnableWebMvcConfiguration</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties, WebProperties webProperties, ObjectProvider&lt;WebMvcRegistrations&gt; mvcRegistrationsProvider, ObjectProvider&lt;WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider, ListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceProperties = (Resources)(resourceProperties.hasBeenCustomized() ? resourceProperties : webProperties.getResources());</span><br><span class="line">        <span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">        <span class="built_in">this</span>.webProperties = webProperties;</span><br><span class="line">        <span class="built_in">this</span>.mvcRegistrations = (WebMvcRegistrations)mvcRegistrationsProvider.getIfUnique();</span><br><span class="line">        <span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = (WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer)resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory; <span class="comment">//spring容器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//静态资源处理器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123; <span class="comment">// 默认配置为true</span></span><br><span class="line">            logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//映射的静态资源路径从/META-INF/resources/webjars/和CLASSPATH_RESOURCE_LOCATIONS获取</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">            <span class="built_in">this</span>.addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>); </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]&#123;&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;&#125;;</span></span><br><span class="line"><span class="comment">private String[] staticLocations;</span></span><br><span class="line"><span class="comment">public Resources() &#123;</span></span><br><span class="line"><span class="comment">     this.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span></span><br><span class="line"><span class="comment">            this.addMappings = true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="built_in">this</span>.addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">                registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations()); <span class="comment">//从绑定的properties文件对应的配置类中读取spring.web.resources.static-locations: [...] </span></span><br><span class="line">                <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">                    registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">Resource</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(servletContext, <span class="string">&quot;/&quot;</span>)&#125;); <span class="comment">//如果是个servlet原生程序，则把其上下文的根路径也加入进来</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//欢迎页资源映射</span></span><br><span class="line"><span class="comment">//HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求.</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">        <span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(<span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, <span class="built_in">this</span>.getWelcomePage(), <span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">        welcomePageHandlerMapping.setInterceptors(<span class="built_in">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">        welcomePageHandlerMapping.setCorsConfigurations(<span class="built_in">this</span>.getCorsConfigurations());</span><br><span class="line">        <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//欢迎页映射构造器</span></span><br><span class="line">    WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders, ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;</span><br><span class="line">        <span class="keyword">if</span> (welcomePage != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123; <span class="comment">//welcomePage为静态文件index.html以及staticPathPattern(请求路径匹配)没有前缀时生效，这也是为什么配置了staticPathPattern不为&quot;/**&quot;时，欢迎页访问不了的原因所在.</span></span><br><span class="line">            logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">            <span class="built_in">this</span>.setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小知识点：favicon，即显示网页图标，浏览器会发送 &#x2F;favicon 请求获取到图标，整个session期间不再获取，session生命周期是浏览器开启到关闭时生效的时间。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot-自动配置源码分析&quot;&gt;&lt;a href=&quot;#SpringBoot-自动配置源码分析&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-自动配置源码分析&quot;&gt;&lt;/a&gt;SpringBoot-自动配置源码分析&lt;/h1&gt;&lt;p&gt;Sp</summary>
      
    
    
    
    
    <category term="源码分析捏" scheme="https://aizlm.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合</title>
    <link href="https://aizlm.github.io/2022/05/19/SSM%E6%95%B4%E5%90%88/"/>
    <id>https://aizlm.github.io/2022/05/19/SSM%E6%95%B4%E5%90%88/</id>
    <published>2022-05-19T07:26:49.000Z</published>
    <updated>2022-05-28T05:11:06.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><ul><li>mapper.xml：与数据库进行交互。<ul><li>配置需要包含数据库连接池，数据源（哪个数据库）</li><li>SqlSessionFactory绑定mybatis.xml（数据具体操作），然后SqlSession对象从SqlSessionFactory中获取</li><li>配置MapperScannerConfigurer对象，指定mapper类扫描路径</li></ul></li><li>service.xml：只配置了包扫描，指定需要扫描到Spring 的Service层所在的包路径</li><li>mvc.xml：配置了Spring MVC扫描的包路径和注解驱动</li><li>web.xml：配置了项目启动时加载的信息<ul><li>配置文件加载context-param-&gt;contextConfigLocation</li><li>Spring容器加载监听器ContextLoaderListener</li><li>SpringMVC前端控制器DispatcherServlet</li></ul></li></ul><p>spring容器的创建：在web.xml声明了监听器ContextLoadListenter，。功能是创建spring容器对象WebApplicationContext，在创建WebApplicationContext对象时读取spring配置文件。读取文件的时候，遇到bean标签或者注解，就能创建service,dao等对象，放到容器中。</p><p>springMVC容器：在web.xml声明了中央调度器DispatcherServlet。在这个servlet的init方法中，创建了容器对象WebApplicationContext在创建WebApplicationContext对象，读取springmvc配置文件，读取文件的时候，遇到@Controller注解，创建控制器controller对象，放到容器中。</p><p>servlet(jsp) -&gt; tomcat -&gt; mybatis -&gt; spring -&gt; springmvc -&gt; springboot -&gt; </p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>在Idea中，xml配置引入外部bean需要以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】项目来源：</p><p>【2】SSM纯注解开发：<a href="https://blog.csdn.net/weixin_53805188/article/details/124103988">https://blog.csdn.net/weixin_53805188/article/details/124103988</a></p><p>【3】<a href="https://blog.csdn.net/m0_54703880/article/details/122637877?utm_source=app&amp;app_version=5.1.1">https://blog.csdn.net/m0_54703880/article/details/122637877?utm_source=app&amp;app_version=5.1.1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SSM整合&quot;&gt;&lt;a href=&quot;#SSM整合&quot; class=&quot;headerlink&quot; title=&quot;SSM整合&quot;&gt;&lt;/a&gt;SSM整合&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;mapper.xml：与数据库进行交互。&lt;ul&gt;
&lt;li&gt;配置需要包含数据库连接池，数据源（哪个数据库）</summary>
      
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>flink学习</title>
    <link href="https://aizlm.github.io/2022/05/07/flink%E5%AD%A6%E4%B9%A0/"/>
    <id>https://aizlm.github.io/2022/05/07/flink%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-05-06T23:54:32.000Z</published>
    <updated>2022-05-07T02:33:40.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flink学习"><a href="#flink学习" class="headerlink" title="flink学习"></a>flink学习</h1><ul><li>特点<ul><li>低延迟</li><li>高吞吐</li><li>准确率高、容错率小</li></ul></li><li>需要处理的问题<ul><li>集群环境下，如何正确访问数据进行处理？</li><li>集群环境下，数据处理错误，如何进行回滚到初始状态进行正确处理分析数据？</li></ul></li></ul><h2 id="flink-amp-WordCount"><a href="#flink-amp-WordCount" class="headerlink" title="flink &amp; WordCount"></a>flink &amp; WordCount</h2><h3 id="Batch（弃用DataSet）"><a href="#Batch（弃用DataSet）" class="headerlink" title="Batch（弃用DataSet）"></a>Batch（弃用DataSet）</h3><ul><li>目录结构</li></ul><img src="/2022/05/07/flink%E5%AD%A6%E4%B9%A0/image-20220507095140469.png"><ul><li>批处理代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建环境</span></span><br><span class="line"><span class="type">ExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 读取数据</span></span><br><span class="line">DataSource&lt;String&gt; wordDataSource = env.readTextFile(<span class="string">&quot;input/words.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将每行数据进行分词，转换成二元组</span></span><br><span class="line">FlatMapOperator&lt;String, Tuple2&lt;String, Long&gt;&gt; wordAndOneTuple = wordDataSource.flatMap((String line, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 3.1 将一行数据进行分词</span></span><br><span class="line">    String[] words = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="comment">// 3.2 将单词转换成二元组</span></span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        out.collect(Tuple2.of(word, <span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).returns(Types.TUPLE(Types.STRING, Types.LONG));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 根据元组word进行分组</span></span><br><span class="line">UnsortedGrouping&lt;Tuple2&lt;String, Long&gt;&gt; wordAndOneGroup = wordAndOneTuple.groupBy(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 分组后累积单词数</span></span><br><span class="line">AggregateOperator&lt;Tuple2&lt;String, Long&gt;&gt; sum = wordAndOneGroup.sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sum.print();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(java,1)</span><br><span class="line">(flink,1)</span><br><span class="line">(world,1)</span><br><span class="line">(hello,3)</span><br></pre></td></tr></table></figure><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>有界流处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">DataStreamSource&lt;String&gt; wordDataStreamSource = env.readTextFile(<span class="string">&quot;input/words.txt&quot;</span>);</span><br><span class="line">SingleOutputStreamOperator&lt;Tuple2&lt;String, Long&gt;&gt; wordAndOneTuple = wordDataStreamSource.flatMap((String line, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out) -&gt; &#123;</span><br><span class="line">    String[] words = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        out.collect(Tuple2.of(word, <span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).returns(Types.TUPLE(Types.STRING, Types.LONG));</span><br><span class="line">KeyedStream&lt;Tuple2&lt;String, Long&gt;, String&gt; wordAndOneKeyedStream = wordAndOneTuple.keyBy(data -&gt; data.f0);</span><br><span class="line">SingleOutputStreamOperator&lt;Tuple2&lt;String, Long&gt;&gt; sum = wordAndOneKeyedStream.sum(<span class="number">1</span>);</span><br><span class="line">sum.print();</span><br><span class="line"><span class="comment">// 流处理会不断等待输入流，启动执行</span></span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&gt; (java,1)</span><br><span class="line">2&gt; (hello,1)</span><br><span class="line">3&gt; (world,1)</span><br><span class="line">2&gt; (hello,2)</span><br><span class="line">4&gt; (flink,1)</span><br><span class="line">2&gt; (hello,3)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flink学习&quot;&gt;&lt;a href=&quot;#flink学习&quot; class=&quot;headerlink&quot; title=&quot;flink学习&quot;&gt;&lt;/a&gt;flink学习&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;特点&lt;ul&gt;
&lt;li&gt;低延迟&lt;/li&gt;
&lt;li&gt;高吞吐&lt;/li&gt;
&lt;li&gt;准确率高、容错</summary>
      
    
    
    
    
    <category term="web学习捏" scheme="https://aizlm.github.io/tags/web%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>jenkins自动部署</title>
    <link href="https://aizlm.github.io/2022/05/05/jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://aizlm.github.io/2022/05/05/jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2022-05-05T07:08:40.000Z</published>
    <updated>2022-05-20T10:13:20.225Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="974a1436272c58c84be0ff9258b6bc668884fbb62fa821c03fa20e92b048778c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>ES使用（无原理）</title>
    <link href="https://aizlm.github.io/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://aizlm.github.io/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-27T00:36:25.000Z</published>
    <updated>2022-04-28T07:53:47.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>文档型数据库，非关系型数据库结构：</p><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/146a779da01f53e7f7a8d53132d3c7cf.png"><p>倒序排序：</p><p>将原本通过ID查询的内容，进行分词操作，映射到相应的id中。</p><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427084342277.png"><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><ul><li>访问地址见项目README；</li></ul><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427094347169.png"><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427095722738.png"><p>chain-dev-*为索引，类似于关系型数据库中为DataBase，索引名字在logstash中定义，具体可见README_ELK；<br>可用字段为收集到的日志所对应的标签值，常用搜索的标签为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chain-dev-2022.04.27&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span><span class="comment">// 文档，可认为是收集到的数据</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;q52paIABsSUfygaQAH36&quot;</span><span class="punctuation">,</span><span class="comment">// 由ES随机生成</span></span><br><span class="line">  <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">// 收集的数据</span></span><br><span class="line">    <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-04-27T01:35:47.849Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;231ms&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;thread_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http-nio-10000-exec-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;logger_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cn.jnu.web.base.LogAspect&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;traceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a6a9eb6b47a98d75&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spanId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8a68f9e630edd054&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">48268</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;springAppName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;service-auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;level_value&quot;</span><span class="punctuation">:</span> <span class="number">20000</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>@timestamp：时间，可通过console范围搜索</li><li>host：ip</li><li>logger_name：全类名</li><li>springAppName：微服务名称</li><li>traceId：链路追踪，全链路查询日志时使用<ul><li>通过页面响应头有个RequestId进行查询ELK中的traceId</li></ul></li></ul><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427100448369.png"><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427100615257.png"><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>两种方式：</p><ul><li>第一种：直接使用Kibana查询语言KQL进行查询</li></ul><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427102012936.png"><ul><li>第二种：通过console传输json，可以进行聚类、模糊等查询</li></ul><p>console：</p><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427084444128.png"><h2 id="以表UI形式显示"><a href="#以表UI形式显示" class="headerlink" title="以表UI形式显示"></a>以表UI形式显示</h2><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/29150985243f4b28c37c7bdcfe4af95.png"><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8f92455ef35dc64f5e89cef8af59e99.png"><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><p>集群的概念及作用：详见【2】29</p><ul><li>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</li><li>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。</li></ul></li><li><p>数据分片及副本：详见【2】33</p><ul><li>原因：一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10 亿文档数据的索引占据1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。 或者单个节点处理搜索请求，响应太慢。</li><li>集群有新节点加入时，ES帮助我们直接进行分片控制。</li></ul></li></ul><h2 id="查询原理"><a href="#查询原理" class="headerlink" title="查询原理"></a>查询原理</h2><img src="/2022/04/27/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220427102333654.png"><ul><li>路由计算：详见【2】39</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】ELK查看DSL：<a href="https://blog.csdn.net/JSWANGCHANG/article/details/121356812">https://blog.csdn.net/JSWANGCHANG/article/details/121356812</a></p><p>【2】ES完整笔记：<a href="https://blog.csdn.net/u011863024/article/details/115721328">https://blog.csdn.net/u011863024/article/details/115721328</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;traceId&quot;: &quot;a6a9eb6b47a98d75&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;sort&quot;:&#123;</span><br><span class="line">&quot;@timestamp&quot;:&#123;</span><br><span class="line">&quot;order&quot;:&quot;desc&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ELK&quot;&gt;&lt;a href=&quot;#ELK&quot; class=&quot;headerlink&quot; title=&quot;ELK&quot;&gt;&lt;/a&gt;ELK&lt;/h1&gt;&lt;h2 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>mybatis简单学习</title>
    <link href="https://aizlm.github.io/2022/04/19/mybatis%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://aizlm.github.io/2022/04/19/mybatis%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-04-19T02:47:18.000Z</published>
    <updated>2022-05-19T07:27:55.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p>为啥要用工厂模式捏？：<a href="https://baijiahao.baidu.com/s?id=1705504841108391352&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1705504841108391352&amp;wfr=spider&amp;for=pc</a></p></li><li><p>尚硅谷mybatis：<a href="https://blog.csdn.net/qq_19387933/article/details/123256034">https://blog.csdn.net/qq_19387933/article/details/123256034</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="后端学习捏" scheme="https://aizlm.github.io/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8D%8F/"/>
    
  </entry>
  
  <entry>
    <title>区块链认知</title>
    <link href="https://aizlm.github.io/2022/04/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E7%9F%A5/"/>
    <id>https://aizlm.github.io/2022/04/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E7%9F%A5/</id>
    <published>2022-04-13T01:50:07.000Z</published>
    <updated>2022-06-01T11:48:17.712Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="657d539d58322e56752f4db1f96da9884810dd8ed6efc428edee4617dd034662"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="区块链" scheme="https://aizlm.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Android虚拟化&amp;容器</title>
    <link href="https://aizlm.github.io/2022/04/11/Android%E8%99%9A%E6%8B%9F%E5%8C%96-%E5%AE%B9%E5%99%A8/"/>
    <id>https://aizlm.github.io/2022/04/11/Android%E8%99%9A%E6%8B%9F%E5%8C%96-%E5%AE%B9%E5%99%A8/</id>
    <published>2022-04-11T08:49:09.000Z</published>
    <updated>2022-04-12T01:54:00.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android虚拟化"><a href="#Android虚拟化" class="headerlink" title="Android虚拟化"></a>Android虚拟化</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android虚拟化&quot;&gt;&lt;a href=&quot;#Android虚拟化&quot; class=&quot;headerlink&quot; title=&quot;Android虚拟化&quot;&gt;&lt;/a&gt;Android虚拟化&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Android逆向知识" scheme="https://aizlm.github.io/tags/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2021KCTF4偶遇棋痴</title>
    <link href="https://aizlm.github.io/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/"/>
    <id>https://aizlm.github.io/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/</id>
    <published>2022-04-10T14:01:55.000Z</published>
    <updated>2022-04-11T08:19:06.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四题-偶遇棋痴"><a href="#第四题-偶遇棋痴" class="headerlink" title="第四题 偶遇棋痴"></a>第四题 偶遇棋痴</h1><ul><li>Java层：</li></ul><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220304084.png"><ul><li>native静态分析：静态注册</li></ul><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220342932.png"><p>目标是返回1，所以需要到LABEL_11得到v3&#x3D;1然后return掉。</p><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220538797.png"><p>输入字符位数14，然后到第二个箭头时，v5是30，获取一下v15，再看v15经过sub_39614()变成了什么，最后到LABEL_11。</p><img src="/2022/04/10/2021KCTF4%E5%81%B6%E9%81%87%E6%A3%8B%E7%97%B4/image-20220410220838527.png"><h1 id="IDA函数映射"><a href="#IDA函数映射" class="headerlink" title="IDA函数映射"></a>IDA函数映射</h1><ul><li>_aeabi_memclr8：memset</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第四题-偶遇棋痴&quot;&gt;&lt;a href=&quot;#第四题-偶遇棋痴&quot; class=&quot;headerlink&quot; title=&quot;第四题 偶遇棋痴&quot;&gt;&lt;/a&gt;第四题 偶遇棋痴&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Java层：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/04/10/</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>从0开始！</title>
    <link href="https://aizlm.github.io/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/"/>
    <id>https://aizlm.github.io/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/</id>
    <published>2022-04-10T06:07:00.000Z</published>
    <updated>2022-04-11T08:19:29.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新学习Android应用开发"><a href="#重新学习Android应用开发" class="headerlink" title="重新学习Android应用开发"></a>重新学习Android应用开发</h1><p>写着一篇主要是发现了自己虽然能理解流程，但很慢且不能看到流程马上想到如何实现，这不好，所以重新开始。主要记录开发中学习到的新的知识点，干巴爹！</p><ul><li>问题：xml布局文件的内容如何转变为View对象？</li></ul><p>aapt（Android Asset Packaging Tool）将布局文件资源编译压缩紧凑后，打包到.apk文件中。</p><p>Activity的子类的onCreate(Bundle)方法调用setContentView(…)方法时， Activity的子类使用LayoutInflater类实例化布局文件中定义的每一个View对象。</p><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220408212807086.png"><p>利用ClassLoader加载实例，ClassLoader中的双亲委派机制也很重要！</p><ul><li>Activity生命周期以及对应内存、用户可见、前台关系？</li></ul><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220409161849607.png"><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220409161928532.png"><ul><li>问题：如何在app下一次启动时，还原到上一次的状态？</li></ul><p>例如：旋转时，app会先销毁实例，走完一个Activity的生命周期，再调用Activity的onCreate、onStart、onResume方法，将app的当前Activity显示到前台中。</p><p>解决方案：重写onSaveInstanceState(Bundle outState)函数，将需要保存的状态以bundle的形式写入到outState中，在onCreate(Bundle savedInstanceState)下次调用的时候，从中取相应数据。</p><p>但需要注意的是这种方法，在完全退出时，调用的onDestory()销毁掉实例时，不会保存outState Bundle，因为Activity实例已经不存在于内存当中了。</p><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220410135836647.png"><p>实例暂存态（onStop()处理永久性数据，onSaveInstanceState处理暂存态数据）：在彻底销毁和重启系统时，暂存态数据会被清除。</p><img src="/2022/04/10/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%81/image-20220410144259030.png"><h1 id="Github上传代码"><a href="#Github上传代码" class="headerlink" title="Github上传代码"></a>Github上传代码</h1><ul><li><a href="https://www.bilibili.com/read/cv10612248/">https://www.bilibili.com/read/cv10612248/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重新学习Android应用开发&quot;&gt;&lt;a href=&quot;#重新学习Android应用开发&quot; class=&quot;headerlink&quot; title=&quot;重新学习Android应用开发&quot;&gt;&lt;/a&gt;重新学习Android应用开发&lt;/h1&gt;&lt;p&gt;写着一篇主要是发现了自己虽然能理解流</summary>
      
    
    
    
    
    <category term="Android应用开发" scheme="https://aizlm.github.io/tags/Android%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>看雪CM3</title>
    <link href="https://aizlm.github.io/2022/04/07/%E7%9C%8B%E9%9B%AACM3/"/>
    <id>https://aizlm.github.io/2022/04/07/%E7%9C%8B%E9%9B%AACM3/</id>
    <published>2022-04-07T12:00:19.000Z</published>
    <updated>2022-04-09T08:03:16.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪CM3"><a href="#看雪CM3" class="headerlink" title="看雪CM3"></a>看雪CM3</h1><p>运行之后发现是个简单输入验证码界面。</p><ul><li>Java层静态分析：xml中application没有debuggable选项，有backup可能会诱发漏洞点。</li></ul><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103138716.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103334441.png"><ul><li>so层静态分析：在导出函数中没有找到静态注册的函数名，进JNI_OnLoad中进行分析，一开始忽略了反调试，j_AD()为反调试函数，这里的反调试只是检测进程是否被附加调试进程。</li></ul><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103612257.png"><p>j_AD()：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328103850827.png"><ul><li>so层动态分析：需要在so加载时进行截断，绕过反调试函数。</li></ul><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328110339719.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328115316040.png"><p>定位到RegisterNatives处，发现参数可以跳转到另一个地址，根据RegisterNative参数JNINativeMethod一一对应上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jint</span> (*RegisterNatives)(JNIEnv*, jclass, <span class="type">const</span> JNINativeMethod*, jint);</span><br></pre></td></tr></table></figure><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122115020.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122450998.png"><p>函数名：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122640761.png"><p>签名：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328122759864.png"><p>地址：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220328123029740.png"><ul><li>动态分析找到对应函数，定位到bc函数：</li></ul><p>执行一下任意字符，然后发现出现 Password Error~ 字样，没有经过j_dc函数，说明是由j_wolf_de和j_st其中一个进行显示的。</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407221122867.png"><p>j_dc涉及到的参数都是环境和系统上下文，没必要看。</p><p>进入j_jk看到一样的j_wolf_de与j_st，重点在j_dc里面，需要返回的result是1，进入分析发现，最终到ds函数：需要返回1，则v8&#x3D;1，这里的v3与v4通过sub_15184进行转换，v4又由j_wolf_de得到，则去hook相应的j_wolf_de方法，获取得到v4。</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407223939145.png"><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407224145304.png"><p>hook代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> wolf_de_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libwolf.so&quot;</span>, <span class="string">&quot;_Z7wolf_dePKc&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wolf_de_addr:&quot;</span>+wolf_de_addr);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(wolf_de_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***orgin: &quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="keyword">var</span> key = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;636D55B2AA8609CB&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***trueKey: &quot;</span> + key);</span><br><span class="line">            <span class="keyword">var</span> truechr = env.<span class="title function_">getStringUtfChars</span>(key, <span class="number">0</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***trueJstring: &quot;</span> + truechr.<span class="title function_">readCString</span>());</span><br><span class="line">            args[<span class="number">0</span>] = truechr;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***changeJstring: &quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;***return: &quot;</span> + retval.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407221053077.png"><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】静态反调试：<a href="http://www.zhaoxiaodan.com/java/android/android-native%E5%8F%8D%E8%B0%83%E8%AF%95.html">http://www.zhaoxiaodan.com/java/android/android-native%E5%8F%8D%E8%B0%83%E8%AF%95.html</a></p><p>【2】动态注册：<a href="https://blog.csdn.net/leifengpeng/article/details/52447864">https://blog.csdn.net/leifengpeng/article/details/52447864</a></p><h1 id="hook注意事项"><a href="#hook注意事项" class="headerlink" title="hook注意事项"></a>hook注意事项</h1><ul><li>如何获取native需要hook的函数名</li></ul><p>frida：Module.enumerateExports(“libwolf.so”)</p><img src="/2022/04/07/%E7%9C%8B%E9%9B%AACM3/image-20220407225503552.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;看雪CM3&quot;&gt;&lt;a href=&quot;#看雪CM3&quot; class=&quot;headerlink&quot; title=&quot;看雪CM3&quot;&gt;&lt;/a&gt;看雪CM3&lt;/h1&gt;&lt;p&gt;运行之后发现是个简单输入验证码界面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java层静态分析：xml中application没</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>加固的了解</title>
    <link href="https://aizlm.github.io/2022/04/03/%E5%8A%A0%E5%9B%BA%E7%9A%84%E4%BA%86%E8%A7%A3/"/>
    <id>https://aizlm.github.io/2022/04/03/%E5%8A%A0%E5%9B%BA%E7%9A%84%E4%BA%86%E8%A7%A3/</id>
    <published>2022-04-03T14:17:32.000Z</published>
    <updated>2022-04-12T01:54:33.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android加固认知"><a href="#Android加固认知" class="headerlink" title="Android加固认知"></a>Android加固认知</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】入门级加固：<a href="https://bbs.pediy.com/thread-255220.htm?source=1">https://bbs.pediy.com/thread-255220.htm?source=1</a></p><p>【2】ClassLoader：<a href="https://www.cnblogs.com/renhui/articles/14268203.html">https://www.cnblogs.com/renhui/articles/14268203.html</a></p><p>【3】（未看）ClassLoader：<a href="https://zhuanlan.zhihu.com/p/81293598">https://zhuanlan.zhihu.com/p/81293598</a></p><ul><li>【4】动态加载系列<ul><li><a href="https://www.jianshu.com/p/fb03c2b59241">https://www.jianshu.com/p/fb03c2b59241</a></li></ul></li></ul><p>【5】shuwoom大佬的加固理解与实现：<a href="https://shuwoom.com/?p=360#1014_Dex%E6%95%B4%E4%BD%93%E5%8A%A0%E5%9B%BA%E5%8E%9F%E7%90%86">https://shuwoom.com/?p=360#1014_Dex%E6%95%B4%E4%BD%93%E5%8A%A0%E5%9B%BA%E5%8E%9F%E7%90%86</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android加固认知&quot;&gt;&lt;a href=&quot;#Android加固认知&quot; class=&quot;headerlink&quot; title=&quot;Android加固认知&quot;&gt;&lt;/a&gt;Android加固认知&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Android逆向知识" scheme="https://aizlm.github.io/tags/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>调试配置问题汇总</title>
    <link href="https://aizlm.github.io/2022/03/28/%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://aizlm.github.io/2022/03/28/%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2022-03-28T02:27:16.000Z</published>
    <updated>2022-04-09T08:02:59.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android调试配置"><a href="#Android调试配置" class="headerlink" title="Android调试配置"></a>Android调试配置</h1><ul><li><p>DDMS，ro.debuggable显示进程：<a href="https://blog.csdn.net/jinmie0193/article/details/111355867">https://blog.csdn.net/jinmie0193/article/details/111355867</a></p></li><li><p>动态调试环境搭建：<a href="https://www.kanxue.com/chm.htm?id=15454&amp;pid=node1001581">https://www.kanxue.com/chm.htm?id=15454&amp;pid=node1001581</a></p></li><li><p>记录几个常用的命令</p><ul><li>jdb -connect com.sun.jdi.SocketAttach:hostname&#x3D;127.0.0.1,port&#x3D;8700</li><li>adb forward tcp:8700 jwdp:</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android调试配置&quot;&gt;&lt;a href=&quot;#Android调试配置&quot; class=&quot;headerlink&quot; title=&quot;Android调试配置&quot;&gt;&lt;/a&gt;Android调试配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DDMS，ro.debuggable显示进程：&lt;a</summary>
      
    
    
    
    
    <category term="Android调试配置" scheme="https://aizlm.github.io/tags/Android%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>frida的认知</title>
    <link href="https://aizlm.github.io/2022/03/24/frida%E7%9A%84%E8%AE%A4%E7%9F%A5/"/>
    <id>https://aizlm.github.io/2022/03/24/frida%E7%9A%84%E8%AE%A4%E7%9F%A5/</id>
    <published>2022-03-24T13:44:53.000Z</published>
    <updated>2022-04-11T08:49:39.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frida的认知"><a href="#frida的认知" class="headerlink" title="frida的认知"></a>frida的认知</h1><p>钩子，永远的神！</p><h2 id="场景1-改TextView"><a href="#场景1-改TextView" class="headerlink" title="场景1 改TextView"></a>场景1 改TextView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;SetTextI18n&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeTextViewClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> findViewById(R.id.textview);</span><br><span class="line">        textView.setText(<span class="string">&quot;aizlm&quot;</span>); <span class="comment">// hook这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改tv的话，一开始的想法是去锁定一个tv，然后在找成员方法进行修改string完成，发现好像不得行，网上看到了别人的思路，大概就是去hook TextView的setText()方法，在这个方法进行重写即可（放一次python，后面都用js了）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">send(&quot;Script loaded successfully &quot;);</span></span><br><span class="line"><span class="string">Java.perform(function x() &#123;</span></span><br><span class="line"><span class="string">    send(&quot;Inside java perform function&quot;);</span></span><br><span class="line"><span class="string">    // Java.use 相当于 Class.forName() 拿到对应的Class而不是直接实例化一个对象，如果需要实例化需要调用$new()</span></span><br><span class="line"><span class="string">    var tv_clz = Java.use(&quot;android.widget.TextView&quot;);</span></span><br><span class="line"><span class="string">    // 当函数有多个重载方法时，用overload关键字</span></span><br><span class="line"><span class="string">    tv_clz.setText.overload(&quot;java.lang.CharSequence&quot;).implementation = function(x) &#123;</span></span><br><span class="line"><span class="string">        send(&quot;before change:&quot; + x.toString());</span></span><br><span class="line"><span class="string">        var info = Java.use(&quot;java.lang.String&quot;).$new(&quot;aizlm be changed!&quot;);</span></span><br><span class="line"><span class="string">        // this 指针指向当前的类实例tv_clz</span></span><br><span class="line"><span class="string">        this.setText(info);</span></span><br><span class="line"><span class="string">        send(&quot;after change:&quot; + info);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&#x27;com.example.hooktest&#x27;</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><ul><li>但这里有个问题就是，hook底层那就不能指定对一个特定的tv进行修改了，思路就是加个id判定：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">send</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">send</span>(<span class="string">&quot;Inside java perform function&quot;</span>);</span><br><span class="line">    <span class="comment">// 属性值</span></span><br><span class="line">    <span class="keyword">var</span> tv_id = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.hooktest.R$id&quot;</span>).<span class="property">textview</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">send</span>(<span class="string">&quot;tv_id:&quot;</span> + tv_id);</span><br><span class="line">    <span class="keyword">var</span> tv_clz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.TextView&quot;</span>);</span><br><span class="line">    tv_clz.<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.CharSequence&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> info = x.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;before change:&quot;</span> + info);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getId</span>() == tv_id) &#123; <span class="comment">// tv_id 替换成0时</span></span><br><span class="line">            info = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;aizlm be changed!&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setText</span>(info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;after change:&quot;</span> + info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>log：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Script loaded successfully </span><br><span class="line">[*] Inside java perform function</span><br><span class="line">[*] tv_id:2131231159</span><br><span class="line">[*] before change:aizlm</span><br><span class="line">[*] after change:aizlm be changed!</span><br><span class="line">// tv_id 替换成0时</span><br><span class="line">[*] before change:aizlm</span><br><span class="line">[*] after change:aizlm</span><br></pre></td></tr></table></figure><p>…未完，hook知识深不见底，寄</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】<a href="https://bbs.pediy.com/thread-227232.htm">https://bbs.pediy.com/thread-227232.htm</a></p><p>【2】<a href="https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A02/README.md">https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A02/README.md</a></p><p>【3】常见hook对象：<a href="https://blog.csdn.net/tianyi19/article/details/121771736">https://blog.csdn.net/tianyi19/article/details/121771736</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;frida的认知&quot;&gt;&lt;a href=&quot;#frida的认知&quot; class=&quot;headerlink&quot; title=&quot;frida的认知&quot;&gt;&lt;/a&gt;frida的认知&lt;/h1&gt;&lt;p&gt;钩子，永远的神！&lt;/p&gt;
&lt;h2 id=&quot;场景1-改TextView&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="Android逆向知识" scheme="https://aizlm.github.io/tags/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>看雪CM2</title>
    <link href="https://aizlm.github.io/2022/03/24/%E7%9C%8B%E9%9B%AACM2/"/>
    <id>https://aizlm.github.io/2022/03/24/%E7%9C%8B%E9%9B%AACM2/</id>
    <published>2022-03-24T09:28:12.000Z</published>
    <updated>2022-04-09T08:03:12.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪CM2"><a href="#看雪CM2" class="headerlink" title="看雪CM2"></a>看雪CM2</h1><p>so层代码出乎意料的简单，不贴payload了，这题重点在于反调试，应该是个双进程守护，手机不知道出了什么毛病，在一个师傅那可以正常显示，而我不行，应该是把所有调试手段都卸掉了，就离谱。</p><p>先码一下，后面再回来康康。</p><ul><li>logcat：</li></ul><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/a27ef716c12b60c1ff924cd261ed9a9.png" style="zoom:80%;"><ul><li>Java层：</li></ul><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/image-20220324212359483.png" style="zoom:100%;"><ul><li>so层：v3是传入对比的flag，v4是虚拟机环境参数env</li></ul><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/image-20220324212437133.png" style="zoom: 80%;"><img src="/2022/03/24/%E7%9C%8B%E9%9B%AACM2/image-20220324212648216.png" style="zoom: 90%;"><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】题目来源：<a href="https://www.kanxue.com/chm.htm?id=14147&amp;pid=node1001296">https://www.kanxue.com/chm.htm?id=14147&amp;pid=node1001296</a></p><p>【2】双进程守护：<a href="https://blog.csdn.net/huaxun66/article/details/53158162">https://blog.csdn.net/huaxun66/article/details/53158162</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;看雪CM2&quot;&gt;&lt;a href=&quot;#看雪CM2&quot; class=&quot;headerlink&quot; title=&quot;看雪CM2&quot;&gt;&lt;/a&gt;看雪CM2&lt;/h1&gt;&lt;p&gt;so层代码出乎意料的简单，不贴payload了，这题重点在于反调试，应该是个双进程守护，手机不知道出了什么毛病，在一</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>默认配置漏洞分析</title>
    <link href="https://aizlm.github.io/2022/03/20/%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://aizlm.github.io/2022/03/20/%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2022-03-20T06:19:08.000Z</published>
    <updated>2022-04-09T08:03:20.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="默认配置威胁"><a href="#默认配置威胁" class="headerlink" title="默认配置威胁"></a>默认配置威胁</h1><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><p>简单说一下，感觉比较简单。</p><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag"><span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、首先将app中存储的数据给备份下来（<br>adb backup -f allowBackup.ab -noapk com.mwr.example.sieve），解压用abe<br>2、然后在其他手机（或者重新安装）把备份的数据给还原回去（<br>adb restore allowBackup.ab），这时候之前手机设置的密码就被绕过了（实际上就是把数据库扔到这边）</p><p>…待学习WebView</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;默认配置威胁&quot;&gt;&lt;a href=&quot;#默认配置威胁&quot; class=&quot;headerlink&quot; title=&quot;默认配置威胁&quot;&gt;&lt;/a&gt;默认配置威胁&lt;/h1&gt;&lt;h2 id=&quot;数据备份&quot;&gt;&lt;a href=&quot;#数据备份&quot; class=&quot;headerlink&quot; title=&quot;数</summary>
      
    
    
    
    
    <category term="android漏洞" scheme="https://aizlm.github.io/tags/android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>看雪CM1</title>
    <link href="https://aizlm.github.io/2022/03/19/%E7%9C%8B%E9%9B%AACM1/"/>
    <id>https://aizlm.github.io/2022/03/19/%E7%9C%8B%E9%9B%AACM1/</id>
    <published>2022-03-19T12:14:33.000Z</published>
    <updated>2022-04-09T08:03:08.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CM（crackme）"><a href="#CM（crackme）" class="headerlink" title="CM（crackme）"></a>CM（crackme）</h2><ul><li>静态Java层分析：先是进入经过个跳转到RegActivity，按钮监听，在native层，接下来分析so。</li></ul><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323102738954.png"><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323102950641.png" style="zoom:80%;"><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323114611508.png"><ul><li>静态so层分析：需求很明确，接下来就是逆一下算法，本来思路是静态逆就可以了，感觉动态会简单点。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sn = <span class="built_in">sub_10C4</span>(env, str);</span><br><span class="line"><span class="keyword">if</span> ( *sn != <span class="number">0x58</span> || sn[<span class="number">1</span>] != <span class="number">0x23</span> || length_v4 != <span class="number">7</span> ) <span class="comment">//前俩字符ascii为0x58，0x23，长度为7</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">j_sleep</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> ~(v28 | v29 | v31) &amp; <span class="number">1</span>; <span class="comment">// 需求是返回1，则v28=v29=v30=0；</span></span><br></pre></td></tr></table></figure><ul><li>动态so调试：触发so，将libxy.so加载进来</li></ul><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323172851018.png"><p>简单分析第二个算法，思路比较简单，就是到v13处将v13进行截获，然后模拟算法过程。</p><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323173818813.png"><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323174025989.png"><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string result = <span class="string">&quot;X#&quot;</span>;</span><br><span class="line">    cout &lt;&lt; result;</span><br><span class="line"><span class="comment">//    key[2]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">128</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = i + <span class="number">35</span>*(<span class="number">378551</span>*<span class="number">63689</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="number">0x78689f66</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    key[3]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">128</span>; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> ttmp = <span class="number">0xAEF501A5</span>;</span><br><span class="line">        ttmp ^= ((ttmp&gt;&gt;<span class="number">2</span>) + (ttmp&lt;&lt;<span class="number">5</span>) + i);</span><br><span class="line">        ttmp = ((ttmp + ((<span class="type">int</span>)ttmp&gt;&gt;<span class="number">31</span>)) ^ ((<span class="type">int</span>)ttmp&gt;&gt;<span class="number">31</span>));</span><br><span class="line">        <span class="keyword">if</span> (ttmp == <span class="number">0x5B578B6A</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    key[4]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">128</span>; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> tmp = ((<span class="number">0x2A</span>&lt;&lt;<span class="number">4</span>) + i);</span><br><span class="line">        tmp = tmp &amp; <span class="number">0xF0000000</span> ? ((tmp &amp; <span class="number">0xF0000000</span>) &gt;&gt; <span class="number">24</span>) ^ tmp &amp; <span class="number">0xFFFFFFF</span> : tmp;</span><br><span class="line">        tmp = ((tmp + ((<span class="type">int</span>)tmp&gt;&gt;<span class="number">31</span>)) ^ ((<span class="type">int</span>)tmp&gt;&gt;<span class="number">31</span>));</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="number">0x2D8</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    key[5]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">128</span>; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> tmp = <span class="number">0x380</span> + i;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> ttmp = <span class="number">0x380</span> + i;</span><br><span class="line">        <span class="keyword">if</span> (tmp &amp; <span class="number">0xF0000000</span>) &#123;</span><br><span class="line">            ttmp = ((tmp &amp; <span class="number">0xF0000000</span>) &gt;&gt; <span class="number">24</span>) ^ tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ttmp = ((tmp | <span class="number">0xFFFFFFF</span>) ^ <span class="number">0xF0000000</span>) &amp; ttmp;</span><br><span class="line">        ttmp = ((ttmp + ((<span class="type">int</span>)ttmp&gt;&gt;<span class="number">31</span>)) ^ ((<span class="type">int</span>)ttmp&gt;&gt;<span class="number">31</span>));</span><br><span class="line">        <span class="keyword">if</span> (ttmp == <span class="number">0x3C0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    key[6]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;  i&lt;<span class="number">128</span>; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v4 = <span class="number">0x2FF54B62</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v2 = <span class="number">0x58ECCC20</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v3 = <span class="number">0x9639CE42</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v5 = <span class="number">0xB4B2F8C2</span>;</span><br><span class="line">        v4 += (i &gt;&gt; <span class="number">2</span>) * v4 * i + <span class="number">0x2FF54B62</span>;</span><br><span class="line">        v2 += <span class="number">32</span> * i * v2 * i + <span class="number">0x58ECCC20</span>;</span><br><span class="line">        v3 = v3 + <span class="number">8</span> * i * v3 * i - <span class="number">0x69C631BE</span>;</span><br><span class="line">        v5 = v5 + <span class="number">2</span> * i * v5 * i - <span class="number">0x4B4D073E</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> tmp = v2 + v3 + v4 + v5;</span><br><span class="line">        tmp = ((tmp + ((<span class="type">int</span>)tmp&gt;&gt;<span class="number">31</span>)) ^ ((<span class="type">int</span>)tmp&gt;&gt;<span class="number">31</span>));</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="number">0x2F0C12EC</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/19/%E7%9C%8B%E9%9B%AACM1/image-20220323174422331.png" alt="image-20220323174422331" style="zoom: 25%;"><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>【1】有无符号数：<a href="https://www.jb51.net/article/123445.htm">https://www.jb51.net/article/123445.htm</a></p><p>【2】动态调试环境搭建：<a href="https://www.kanxue.com/chm.htm?id=15454&amp;pid=node1001581">https://www.kanxue.com/chm.htm?id=15454&amp;pid=node1001581</a></p><p>【3】题目来源：<a href="https://www.kanxue.com/chm.htm?id=14128&amp;pid=node1001296">https://www.kanxue.com/chm.htm?id=14128&amp;pid=node1001296</a></p><h1 id="做题总结"><a href="#做题总结" class="headerlink" title="做题总结"></a>做题总结</h1><p>害，python太弱，静态分析算法的时候模拟不出来无符号数的运算，然后用cpp去模拟，另外手生到动态调试环境调一个下午，太久没做了，辣鸡项目，就离谱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CM（crackme）&quot;&gt;&lt;a href=&quot;#CM（crackme）&quot; class=&quot;headerlink&quot; title=&quot;CM（crackme）&quot;&gt;&lt;/a&gt;CM（crackme）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态Java层分析：先是进入经过个跳转到RegActiv</summary>
      
    
    
    
    
    <category term="有空来一道" scheme="https://aizlm.github.io/tags/%E6%9C%89%E7%A9%BA%E6%9D%A5%E4%B8%80%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Permission漏洞分析</title>
    <link href="https://aizlm.github.io/2022/03/19/Permission%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://aizlm.github.io/2022/03/19/Permission%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2022-03-19T05:10:31.000Z</published>
    <updated>2022-04-09T08:03:27.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【复现】Permission漏洞"><a href="#【复现】Permission漏洞" class="headerlink" title="【复现】Permission漏洞"></a>【复现】Permission漏洞</h2><h2 id="Permission基础"><a href="#Permission基础" class="headerlink" title="Permission基础"></a>Permission基础</h2><p>权限：</p><p>权限都需要在manifest中进行声明，危险权限需要在请求时进行验证。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">(1)name：自定义权限的名字，其他app引用的名字</span></span><br><span class="line"><span class="comment">(2)lable：标签，用于描述该权限保护的关键功能,显示给用户的，它的值可是一个 string 数据</span></span><br><span class="line"><span class="comment">(3)description：描述，比 label 更长的对权限的描述。值是通过resource文件中获取的，不能直接写string值。</span></span><br><span class="line"><span class="comment">(4)permissionGroup：权限组，可选属性。在大多数情况下，应该将其设置为一个标准系统组（android.Manifest.permission_group），尽管可以自己定义一个组。</span></span><br><span class="line"><span class="comment">(5)protectionLevel：权限的等级，必须的属性 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">android:name</span>=<span class="string">&quot;com.example.myapp.permission.DEADLY_ACTIVITY&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:label</span>=<span class="string">&quot;@string/permlab_deadlyActivity&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:description</span>=<span class="string">&quot;@string/permdesc_deadlyActivity&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:permissionGroup</span>=<span class="string">&quot;android.permission-group.COST_MONEY&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:protectionLevel</span>=<span class="string">&quot;dangerous&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>危险权限组：</p><img src="/2022/03/19/Permission%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20220318154535112.png" style="zoom: 67%;"><ul><li><p>安装时权限：安装时所需要提供的权限，<strong>Android6.0</strong>后不需要赋予危险权限。</p></li><li><p>运行时权限：用户使用有关危险权限时的功能时，需要请求响应权限。</p><ul><li><p>关于危险权限的权限组</p><ul><li>对应Android6-8，用户赋予权限组的任意一个权限，则app会获取到权限组的所有权限。</li><li>Android9后，用户赋予权限组的一个权限，则app只能获取到权限组该权限。</li></ul></li><li><p>申请权限步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">权限申请步骤：</span><br><span class="line"><span class="number">1.</span>检查有无权限 （ContextCompat.checkSelfPermission()）</span><br><span class="line">    有权限——&gt;运行</span><br><span class="line">    无权限——&gt;申请权限</span><br><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.WRITE_CALENDAR)!= PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">// 权限没有被授予</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>申请权限（走权限回调）</span><br><span class="line">    用户同意——&gt;运行</span><br><span class="line">    用户拒绝——&gt;展示跳转设置界面对话框</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">requestPermissions()弹窗让用户选择是否授权，选择后进入Activity的回调函数onRequestPermissionsResult，这里的权限都需要在manifest中进行声明，否则不会有弹窗</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ActivityCompat.requestPermissions(thisActivity,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span>跳转设置对话框</span><br><span class="line">    同意跳转——&gt;跳转特定的权限打开界面</span><br><span class="line">    用户拒绝——&gt;Toast提示没权限，功能不能正常使用</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="type">int</span>[] grantResults)</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>特殊权限：只有平台和OEM（原始设备制造商）可以定义，用于执行特定操作，level被分配为protect。</p></li></ul><img src="/2022/03/19/Permission%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20220318154424251.png" style="zoom:100%;"><img src="/2022/03/19/Permission%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20220319134738350.png" style="zoom:100%;"><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>ActivityA与ActivityB有共同的permission，如何交互？假设ActivityA自定义权限，ActivityB访问ActivityA的SecondActivity，其中设置protectionLevel&#x3D;”normal”，不需要动态申请权限。（需要先行安装ActivityA，后安装ActivityB）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在ActivityA自定义权限com.example.testpermission2.MainActivity.TEST --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.example.testpermission2.MainActivity.TEST&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;abc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:protectionLevel</span>=<span class="string">&quot;normal&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Activity需要相同权限才能访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span>=<span class="string">&quot;com.example.testpermission2.MainActivity.TEST&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.SecondActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.testpermission2.jmp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ActivityB中声明ActivityA中的权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.testpermission2.MainActivity.TEST&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>ActivityB测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClickToJumpActivityListener</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    intent.setAction(<span class="string">&quot;com.example.testpermission2.jmp&quot;</span>);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">    <span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）两个应用声明了相同的权限？</span><br><span class="line">Android不允许两个不同的应用定义一个相同名字的权限（除非这两个应用拥有相同签名），所以最好不要命名相同</span><br><span class="line">（2）应用安装的顺序关系</span><br><span class="line">场景：APP A中声明了权限permission A，APP B中使用了权限permissionA</span><br><span class="line">情况1：PermissionA的保护级别是normal或者dangerous，只能App A先安装，App B后安装，从App B打开App A一切正常，否则报错</span><br><span class="line">情况2：PermissionA的保护级别是signature或者signatureOrSystem</span><br><span class="line">      App B先安装，App A后安装，如果App A和App B是相同的签名，那么App B可以获取到PermissionA的权限</span><br><span class="line">      如果App A和App B的签名不同，则App B获取不到PermissionA权限</span><br><span class="line">      对于相同签名的app来说，不论安装先后，只要是声明了权限，请求该权限的app就会获得该权限</span><br><span class="line">情况3:android:protectionLevel会影响权限在Android6.0+系统的使用</span><br><span class="line">     android:protectionLevel=&quot;normal&quot;，不需要动态申请</span><br><span class="line">     android:protectionLevel=&quot;dangerous&quot;，需要动态申请</span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><ul><li>通信流程：Android提供了ICC进行通信，满足组件间的相互传递数据，通信发起方使用Intent携带有其他组件的信息（action，category，data…），应用层框架在通信发起后去寻找该Intent的接收方，通信接收方需要将组件进行暴露（exported&#x3D;true）。</li></ul><p>攻击样例：模拟攻击者通过给指定的组件发送Intent下载文件，攻击者所有的app无需权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明所需的权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过broadcastReceiver接收 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.Download&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.testpermission2.down&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//receiver 监听</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (intent.getAction().equals(<span class="string">&quot;com.example.testpermission2.down&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">load</span> <span class="operator">=</span> intent.getBundleExtra(<span class="string">&quot;load&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> load.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> load.getString(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line"><span class="comment">//            String url = intent.getStringExtra(&quot;url&quot;);</span></span><br><span class="line"><span class="comment">//            String filename = intent.getStringExtra(&quot;filename&quot;);</span></span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;Download file: &quot;</span> + url + <span class="string">&quot;/静态广播/&quot;</span>+ filename, Toast.LENGTH_LONG).show();</span><br><span class="line">        Log.d(<span class="string">&quot;aizlm&quot;</span>, <span class="string">&quot;onReceive: &quot;</span>+<span class="string">&quot;Download file!!!! &quot;</span> + url + filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//恶意攻击</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClickjumpToDownCompListener</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    intent.setAction(<span class="string">&quot;com.example.testpermission2.down&quot;</span>);</span><br><span class="line">    <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">    bundle.putString(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;https://aizlm.github.io&quot;</span>);</span><br><span class="line">    bundle.putString(<span class="string">&quot;filename&quot;</span>, <span class="string">&quot;hhhhhhh&quot;</span>);</span><br><span class="line">    intent.putExtra(<span class="string">&quot;load&quot;</span>, bundle);</span><br><span class="line"><span class="comment">//        intent.putExtra(&quot;url&quot;, &quot;https://aizlm.github.io&quot;);</span></span><br><span class="line"><span class="comment">//        intent.putExtra(&quot;filename&quot;, &quot;hhhhhhh&quot;);</span></span><br><span class="line">    <span class="comment">//Android7.0以上需要指定组件名</span></span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="string">&quot;com.example.testpermission2&quot;</span>, <span class="string">&quot;com.example.testpermission2.Download&quot;</span>));</span><br><span class="line">    sendBroadcast(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/19/Permission%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20220319145622546.png" style="zoom:80%;"><ul><li>防范方法：<ul><li>在相应的组件中设置permission，则只有具有相同权限的程序才可调用到该组件（如果有需要暴露的话，没必要就置为false），如果permission是自定义权限的话，按需设置android:protectionLevel。</li></ul></li></ul><p>…未完</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>【1】<a href="https://www.kanxue.com/chm.htm">https://www.kanxue.com/chm.htm</a></p><p>【2】<a href="https://bbs.pediy.com/thread-269988.htm#msg_header_h2_4">https://bbs.pediy.com/thread-269988.htm#msg_header_h2_4</a></p><p>【3】<a href="https://developer.android.com/guide/topics/manifest/permission-element">https://developer.android.com/guide/topics/manifest/permission-element</a></p><p>【4】<a href="https://blog.csdn.net/qq_39326574/article/details/96310112">https://blog.csdn.net/qq_39326574/article/details/96310112</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;【复现】Permission漏洞&quot;&gt;&lt;a href=&quot;#【复现】Permission漏洞&quot; class=&quot;headerlink&quot; title=&quot;【复现】Permission漏洞&quot;&gt;&lt;/a&gt;【复现】Permission漏洞&lt;/h2&gt;&lt;h2 id=&quot;Permissio</summary>
      
    
    
    
    
    <category term="android漏洞" scheme="https://aizlm.github.io/tags/android%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
